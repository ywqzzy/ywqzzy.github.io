{"pages":[{"title":"about","permalink":"http://ywqzzy.github.io/about/index.html","text":"最爱的人 阳阳笨INFJACM 退役蒟蒻非科班菜鸡喜欢新鲜事物余生请你指教 Java C++ 各种技术略知一二 CUCer —–&gt; BUPTer 联系方式 知乎. 虚弱球"},{"title":"tags","permalink":"http://ywqzzy.github.io/tags/index.html","text":""}],"posts":[{"title":"词法分析","permalink":"http://ywqzzy.github.io/2019/04/27/词法分析/","text":"标识符是一个大的集合。 记号的数据结构定义123456789101112enum kind &#123;IF,LPAREN,ID,INTLIT,...&#125;struct token&#123; enum kind k; char *lexeme;// 单词&#125;；/*eg if(x&gt;5) ===&gt;&gt; token&#123;k=IF,lexeme=0&#125;;token&#123;k=LPAREN,lexeme=0&#125;；token&#123;k=ID,lexeme=\"x\"&#125;;.....*/ 词法分析器的任务，字符流到记号流。 记号流是编译器内部定义的数据结构，编码所识别出的词法单元。 词法分析—手工构造法相对复杂，容易出错。 词法分析器的生成器（自动化）：可快速原型、代码量少，但难控制细节。 转移图 1234567891011121314151617token nextToken() &#123; c = getChar(); switch(c) &#123; case '&lt;': c= getChar(); switch(c)&#123; case '=': return LE; case='&gt;':return NE; default: rollback();return LT; &#125; case '=':return EQ; case '&gt;': c= getChar(); switch(c):&#123; .....//和上面类似 &#125; &#125;&#125; 标识符的转移图： 识别关键字 也可以弄关键字构成的哈希表，先统一按照关键符的转移图进行识别，进一步查表看是否是关键字。完美哈希 正则表达式 kleene闭包。 例子：标识符c语言：以字母或下划线开头，后面跟多个或0个字母数字或下划线 （a|b|c|…..z|A|B|C|….|Z|–)(a|b|c|…..z|A|B|C|….|Z|–|0|1|…|9|)* 有限状态自动机 非确定有限状态自动机（NFA） 确定有限状态自动机（DFA) NFA难以判断字符串是否可接受。需要进行搜索。需要将NFA转化为等价的DFA。 DFA的实现带有边和节点的有向图。 边上面有信息 节点上有信息 正则表达式到NFA（Thompson算法）RE—&gt;NFA—&gt;DFA—&gt;词法分析器代码 对基本的RE直接构造 对复合的RE递归构造 NFA转化为DFA（子集构造法） 不动点算法：why能终止？ DFA最小化Hopcroft算法 什么叫做能切分？ 首先切分成非终结符和终结符两类 DFA的代码表示转移表 哈希表 跳转表 转移表：还要有词法分析驱动代码。 ​ 最长匹配思想。 跳转表: 跳转表不需要维护一个大的转移数组。"},{"title":"test","permalink":"http://ywqzzy.github.io/2019/01/22/test/","text":"IO模型Unix有五种IO模型， 阻塞式I/O 非阻塞式I/O I/0复用（select/poll） 信号驱动式（SIGIO） 异步I/O(AIO) 阻塞式I/O应用进程被阻塞，直到数据复制到应用进程缓冲区中才返回。 应该注意到，在阻塞的过程中，其它程序还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其他程序还可以执行，所以不消耗 CPU 时间，这种模型的 CPU 利用率效率会比较高。 下图中，recvfrom 用于接收 Socket 传来的数据，并复制到应用进程的缓冲区 buf 中。这里把 recvfrom() 当成系统调用。 1ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);"}]}