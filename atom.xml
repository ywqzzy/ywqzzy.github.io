<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zzywq</title>
  
  <subtitle>严球球</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ywqzzy.github.io/"/>
  <updated>2020-10-29T15:20:17.578Z</updated>
  <id>http://ywqzzy.github.io/</id>
  
  <author>
    <name>ywq</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springsnail源码分析</title>
    <link href="http://ywqzzy.github.io/2020/10/29/springsnail%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://ywqzzy.github.io/2020/10/29/springsnail源码分析/</id>
    <published>2020-10-29T13:27:32.000Z</published>
    <updated>2020-10-29T15:20:17.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fdwrapper"><a href="#fdwrapper" class="headerlink" title="fdwrapper"></a>fdwrapper</h2><p>都是些辅助函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FDWRAPPER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FDWRAPPER_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> RET_CODE &#123; OK = <span class="number">0</span>, NOTHING = <span class="number">1</span>, IOERR = <span class="number">-1</span>, CLOSED = <span class="number">-2</span>, BUFFER_FULL = <span class="number">-3</span>, BUFFER_EMPTY = <span class="number">-4</span>, TRY_AGAIN &#125;;</span><br><span class="line"><span class="keyword">enum</span> OP_TYPE &#123; READ = <span class="number">0</span>, WRITE, ERROR &#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">( <span class="keyword">int</span> fd )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_read_fd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_write_fd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removefd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closefd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modfd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">int</span> ev )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> FDWRAPPER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FDWRAPPER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setnonblocking</span><span class="params">( <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old_option = fcntl( fd, F_GETFL );</span><br><span class="line">    <span class="keyword">int</span> new_option = old_option | O_NONBLOCK;</span><br><span class="line">    fcntl( fd, F_SETFL, new_option );</span><br><span class="line">    <span class="keyword">return</span> old_option;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_read_fd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLIN | EPOLLET;</span><br><span class="line">    epoll_ctl( epollfd, EPOLL_CTL_ADD, fd, &amp;event );</span><br><span class="line">    setnonblocking( fd );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_write_fd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = EPOLLOUT | EPOLLET;</span><br><span class="line">    epoll_ctl( epollfd, EPOLL_CTL_ADD, fd, &amp;event );</span><br><span class="line">    setnonblocking( fd );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">closefd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_ctl( epollfd, EPOLL_CTL_DEL, fd, <span class="number">0</span> );</span><br><span class="line">    close( fd );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removefd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_ctl( epollfd, EPOLL_CTL_DEL, fd, <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modfd</span><span class="params">( <span class="keyword">int</span> epollfd, <span class="keyword">int</span> fd, <span class="keyword">int</span> ev )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    epoll_event event;</span><br><span class="line">    event.data.fd = fd;</span><br><span class="line">    event.events = ev | EPOLLET;</span><br><span class="line">    epoll_ctl( epollfd, EPOLL_CTL_MOD, fd, &amp;event );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="conn"><a href="#conn" class="headerlink" title="conn"></a>conn</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CONN_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CONN_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fdwrapper.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">conn</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    conn();</span><br><span class="line">    ~conn();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_clt</span><span class="params">( <span class="keyword">int</span> sockfd, <span class="keyword">const</span> sockaddr_in&amp; client_addr )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init_srv</span><span class="params">( <span class="keyword">int</span> sockfd, <span class="keyword">const</span> sockaddr_in&amp; server_addr )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">RET_CODE <span class="title">read_clt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">RET_CODE <span class="title">write_clt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">RET_CODE <span class="title">read_srv</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">RET_CODE <span class="title">write_srv</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> BUF_SIZE = <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// client</span></span><br><span class="line">    <span class="keyword">char</span>* m_clt_buf;</span><br><span class="line">    <span class="keyword">int</span> m_clt_read_idx;</span><br><span class="line">    <span class="keyword">int</span> m_clt_write_idx;</span><br><span class="line">    sockaddr_in m_clt_address;</span><br><span class="line">    <span class="keyword">int</span> m_cltfd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// server</span></span><br><span class="line">    <span class="keyword">char</span>* m_srv_buf;</span><br><span class="line">    <span class="keyword">int</span> m_srv_read_idx;</span><br><span class="line">    <span class="keyword">int</span> m_srv_write_idx;</span><br><span class="line">    sockaddr_in m_srv_address;</span><br><span class="line">    <span class="keyword">int</span> m_srvfd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> m_srv_closed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">conn::conn()</span><br><span class="line">&#123;</span><br><span class="line">    m_srvfd = <span class="number">-1</span>;</span><br><span class="line">    m_clt_buf = <span class="keyword">new</span> <span class="keyword">char</span>[ BUF_SIZE ];</span><br><span class="line">    <span class="keyword">if</span>( !m_clt_buf )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">    &#125;</span><br><span class="line">    m_srv_buf = <span class="keyword">new</span> <span class="keyword">char</span>[ BUF_SIZE ];</span><br><span class="line">    <span class="keyword">if</span>( !m_srv_buf )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::exception();</span><br><span class="line">    &#125;</span><br><span class="line">    reset();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn::~conn()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> [] m_clt_buf;</span><br><span class="line">    <span class="keyword">delete</span> [] m_srv_buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> conn::init_clt( <span class="keyword">int</span> sockfd, <span class="keyword">const</span> sockaddr_in&amp; client_addr )</span><br><span class="line">&#123;</span><br><span class="line">    m_cltfd = sockfd;</span><br><span class="line">    m_clt_address = client_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> conn::init_srv( <span class="keyword">int</span> sockfd, <span class="keyword">const</span> sockaddr_in&amp; server_addr )</span><br><span class="line">&#123;</span><br><span class="line">    m_srvfd = sockfd;</span><br><span class="line">    m_srv_address = server_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> conn::reset()</span><br><span class="line">&#123;</span><br><span class="line">    m_clt_read_idx = <span class="number">0</span>;</span><br><span class="line">    m_clt_write_idx = <span class="number">0</span>;</span><br><span class="line">    m_srv_read_idx = <span class="number">0</span>;</span><br><span class="line">    m_srv_write_idx = <span class="number">0</span>;</span><br><span class="line">    m_srv_closed = <span class="literal">false</span>;</span><br><span class="line">    m_cltfd = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">memset</span>( m_clt_buf, <span class="string">'\0'</span>, BUF_SIZE );</span><br><span class="line">    <span class="built_in">memset</span>( m_srv_buf, <span class="string">'\0'</span>, BUF_SIZE );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RET_CODE conn::read_clt()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> bytes_read = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m_clt_read_idx &gt;= BUF_SIZE )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"the client read buffer is full, let server write"</span> );</span><br><span class="line">            <span class="keyword">return</span> BUFFER_FULL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes_read = recv( m_cltfd, m_clt_buf + m_clt_read_idx, BUF_SIZE - m_clt_read_idx, <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> ( bytes_read == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN || errno == EWOULDBLOCK )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> IOERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( bytes_read == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> CLOSED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_clt_read_idx += bytes_read;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ( ( m_clt_read_idx - m_clt_write_idx ) &gt; <span class="number">0</span> ) ? OK : NOTHING;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RET_CODE conn::read_srv()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> bytes_read = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m_srv_read_idx &gt;= BUF_SIZE )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"the server read buffer is full, let client write"</span> );</span><br><span class="line">            <span class="keyword">return</span> BUFFER_FULL;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes_read = recv( m_srvfd, m_srv_buf + m_srv_read_idx, BUF_SIZE - m_srv_read_idx, <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> ( bytes_read == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN || errno == EWOULDBLOCK )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> IOERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( bytes_read == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"the server should not close the persist connection"</span> );</span><br><span class="line">            <span class="keyword">return</span> CLOSED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_srv_read_idx += bytes_read;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ( ( m_srv_read_idx - m_srv_write_idx ) &gt; <span class="number">0</span> ) ? OK : NOTHING;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RET_CODE conn::write_srv()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> bytes_write = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m_clt_read_idx &lt;= m_clt_write_idx )</span><br><span class="line">        &#123;</span><br><span class="line">            m_clt_read_idx = <span class="number">0</span>;</span><br><span class="line">            m_clt_write_idx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> BUFFER_EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes_write = send( m_srvfd, m_clt_buf + m_clt_write_idx, m_clt_read_idx - m_clt_write_idx, <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> ( bytes_write == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN || errno == EWOULDBLOCK )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> TRY_AGAIN;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"write server socket failed, %s"</span>, strerror( errno ) );</span><br><span class="line">            <span class="keyword">return</span> IOERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( bytes_write == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> CLOSED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_clt_write_idx += bytes_write;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RET_CODE conn::write_clt()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> bytes_write = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( m_srv_read_idx &lt;= m_srv_write_idx )</span><br><span class="line">        &#123;</span><br><span class="line">            m_srv_read_idx = <span class="number">0</span>;</span><br><span class="line">            m_srv_write_idx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> BUFFER_EMPTY;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bytes_write = send( m_cltfd, m_srv_buf + m_srv_write_idx, m_srv_read_idx - m_srv_write_idx, <span class="number">0</span> );</span><br><span class="line">        <span class="keyword">if</span> ( bytes_write == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( errno == EAGAIN || errno == EWOULDBLOCK )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> TRY_AGAIN;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"write client socket failed, %s"</span>, strerror( errno ) );</span><br><span class="line">            <span class="keyword">return</span> IOERR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ( bytes_write == <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> CLOSED;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_srv_write_idx += bytes_write;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>没啥新意，很普通的 logger</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_loglevel</span><span class="params">( <span class="keyword">int</span> log_level = LOG_DEBUG )</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">( <span class="keyword">int</span> log_level, <span class="keyword">const</span> <span class="keyword">char</span>* file_name, <span class="keyword">int</span> line_num, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"log.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> level = LOG_INFO;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> LOG_BUFFER_SIZE = <span class="number">2048</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* loglevels[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"emerge!"</span>, <span class="string">"alert!"</span>, <span class="string">"critical!"</span>, <span class="string">"error!"</span>, <span class="string">"warn!"</span>, <span class="string">"notice:"</span>, <span class="string">"info:"</span>, <span class="string">"debug:"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_loglevel</span><span class="params">( <span class="keyword">int</span> log_level )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    level = log_level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">( <span class="keyword">int</span> log_level,  <span class="keyword">const</span> <span class="keyword">char</span>* file_name, <span class="keyword">int</span> line_num, <span class="keyword">const</span> <span class="keyword">char</span>* format, ... )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( log_level &gt; level )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">time_t</span> tmp = time( <span class="literal">NULL</span> );</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">cur_time</span> = <span class="title">localtime</span>( &amp;<span class="title">tmp</span> );</span></span><br><span class="line">    <span class="keyword">if</span> ( ! cur_time )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> arg_buffer[ LOG_BUFFER_SIZE ];</span><br><span class="line">    <span class="built_in">memset</span>( arg_buffer, <span class="string">'\0'</span>, LOG_BUFFER_SIZE );</span><br><span class="line">    strftime( arg_buffer, LOG_BUFFER_SIZE - <span class="number">1</span>, <span class="string">"[ %x %X ] "</span>, cur_time );</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"%s"</span>, arg_buffer );</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"%s:%04d "</span>, file_name, line_num );</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"%s "</span>, loglevels[ log_level - LOG_EMERG ] );</span><br><span class="line"></span><br><span class="line">    va_list arg_list;</span><br><span class="line">    va_start( arg_list, format );</span><br><span class="line">    <span class="built_in">memset</span>( arg_buffer, <span class="string">'\0'</span>, LOG_BUFFER_SIZE );</span><br><span class="line">    vsnprintf( arg_buffer, LOG_BUFFER_SIZE - <span class="number">1</span>, format, arg_list );</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">"%s\n"</span>, arg_buffer );</span><br><span class="line">    fflush( <span class="built_in">stdout</span> );</span><br><span class="line">    va_end( arg_list );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mgr"><a href="#mgr" class="headerlink" title="mgr"></a>mgr</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> SRVMGR_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SRVMGR_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"fdwrapper.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"conn.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">map</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">host</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> m_hostname[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> m_port;</span><br><span class="line">    <span class="keyword">int</span> m_conncnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mgr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    mgr( <span class="keyword">int</span> epollfd, <span class="keyword">const</span> host&amp; srv );</span><br><span class="line">    ~mgr();</span><br><span class="line">    <span class="comment">/* 客户端连接服务器 */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">conn2srv</span><span class="params">( <span class="keyword">const</span> sockaddr_in&amp; address )</span></span>;</span><br><span class="line">    <span class="function">conn* <span class="title">pick_conn</span><span class="params">( <span class="keyword">int</span> sockfd )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">free_conn</span><span class="params">( conn* connection )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_used_conn_cnt</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recycle_conns</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">RET_CODE <span class="title">process</span><span class="params">( <span class="keyword">int</span> fd, OP_TYPE type )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m_epollfd;</span><br><span class="line">    <span class="built_in">map</span>&lt; <span class="keyword">int</span>, conn* &gt; m_conns;</span><br><span class="line">    <span class="built_in">map</span>&lt; <span class="keyword">int</span>, conn* &gt; m_used;</span><br><span class="line">    <span class="built_in">map</span>&lt; <span class="keyword">int</span>, conn* &gt; m_freed;</span><br><span class="line">    host m_logic_srv;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mgr::m_epollfd = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> mgr::conn2srv( <span class="keyword">const</span> sockaddr_in&amp; address )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> sockfd = socket( PF_INET, SOCK_STREAM, <span class="number">0</span> );</span><br><span class="line">    <span class="keyword">if</span>( sockfd &lt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( connect( sockfd, ( struct sockaddr* )&amp;address, <span class="keyword">sizeof</span>( address ) ) != <span class="number">0</span>  )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">log</span>(LOG_INFO, __FILE__, __LINE__, <span class="string">"connect error"</span>);</span><br><span class="line">        close( sockfd );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sockfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mgr::mgr( <span class="keyword">int</span> epollfd, <span class="keyword">const</span> host&amp; srv ) : m_logic_srv( srv )</span><br><span class="line">&#123;</span><br><span class="line">    m_epollfd = epollfd;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    bzero( &amp;address, <span class="keyword">sizeof</span>( address ) );</span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    inet_pton( AF_INET, srv.m_hostname, &amp;address.sin_addr );</span><br><span class="line">    address.sin_port = htons( srv.m_port );</span><br><span class="line">    <span class="built_in">log</span>( LOG_INFO, __FILE__, __LINE__, <span class="string">"logcial srv host info: (%s, %d)"</span>, srv.m_hostname, srv.m_port );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; srv.m_conncnt; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">        sleep( <span class="number">1</span> );</span><br><span class="line">        <span class="keyword">int</span> sockfd = conn2srv( address );</span><br><span class="line">        <span class="keyword">if</span>( sockfd &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"build connection %d failed"</span>, i );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>( LOG_INFO, __FILE__, __LINE__, <span class="string">"build connection %d to server success"</span>, i );</span><br><span class="line">            conn* tmp = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                tmp = <span class="keyword">new</span> conn;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span>( ... )</span><br><span class="line">            &#123;</span><br><span class="line">                close( sockfd );</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp-&gt;init_srv( sockfd, address );</span><br><span class="line">            m_conns.insert( pair&lt; <span class="keyword">int</span>, conn* &gt;( sockfd, tmp ) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mgr::~mgr()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mgr::get_used_conn_cnt()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m_used.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">conn* mgr::pick_conn( <span class="keyword">int</span> cltfd  )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_conns.empty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"not enough srv connections to server"</span> );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">map</span>&lt; <span class="keyword">int</span>, conn* &gt;::iterator iter =  m_conns.begin();</span><br><span class="line">    <span class="keyword">int</span> srvfd = iter-&gt;first;</span><br><span class="line">    conn* tmp = iter-&gt;second;</span><br><span class="line">    <span class="keyword">if</span>( !tmp )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"empty server connection object"</span> );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    m_conns.erase( iter );</span><br><span class="line">    m_used.insert( pair&lt; <span class="keyword">int</span>, conn* &gt;( cltfd, tmp ) );</span><br><span class="line">    m_used.insert( pair&lt; <span class="keyword">int</span>, conn* &gt;( srvfd, tmp ) );</span><br><span class="line">    add_read_fd( m_epollfd, cltfd );</span><br><span class="line">    add_read_fd( m_epollfd, srvfd );</span><br><span class="line">    <span class="built_in">log</span>( LOG_INFO, __FILE__, __LINE__, <span class="string">"bind client sock %d with server sock %d"</span>, cltfd, srvfd );</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> mgr::free_conn( conn* connection )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> cltfd = connection-&gt;m_cltfd;</span><br><span class="line">    <span class="keyword">int</span> srvfd = connection-&gt;m_srvfd;</span><br><span class="line">    closefd( m_epollfd, cltfd );</span><br><span class="line">    closefd( m_epollfd, srvfd );</span><br><span class="line">    m_used.erase( cltfd );</span><br><span class="line">    m_used.erase( srvfd );</span><br><span class="line">    connection-&gt;reset();</span><br><span class="line">    m_freed.insert( pair&lt; <span class="keyword">int</span>, conn* &gt;( srvfd, connection ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> mgr::recycle_conns()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( m_freed.empty() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>( <span class="built_in">map</span>&lt; <span class="keyword">int</span>, conn* &gt;::iterator iter = m_freed.begin(); iter != m_freed.end(); iter++ )</span><br><span class="line">    &#123;</span><br><span class="line">        sleep( <span class="number">1</span> );</span><br><span class="line">        <span class="keyword">int</span> srvfd = iter-&gt;first;</span><br><span class="line">        conn* tmp = iter-&gt;second;</span><br><span class="line">        srvfd = conn2srv( tmp-&gt;m_srv_address );</span><br><span class="line">        <span class="keyword">if</span>( srvfd &lt; <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"fix connection failed"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">log</span>( LOG_INFO, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"fix connection success"</span> );</span><br><span class="line">            tmp-&gt;init_srv( srvfd, tmp-&gt;m_srv_address );</span><br><span class="line">            m_conns.insert( pair&lt; <span class="keyword">int</span>, conn* &gt;( srvfd, tmp ) );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m_freed.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RET_CODE mgr::process( <span class="keyword">int</span> fd, OP_TYPE type )</span><br><span class="line">&#123;</span><br><span class="line">    conn* connection = m_used[ fd ];</span><br><span class="line">    <span class="keyword">if</span>( !connection )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NOTHING;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( connection-&gt;m_cltfd == fd )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> srvfd = connection-&gt;m_srvfd;</span><br><span class="line">        <span class="keyword">switch</span>( type )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> READ:</span><br><span class="line">            &#123;</span><br><span class="line">                RET_CODE res = connection-&gt;read_clt();</span><br><span class="line">                <span class="keyword">switch</span>( res )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> OK:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">log</span>( LOG_DEBUG, __FILE__, __LINE__, <span class="string">"content read from client: %s"</span>, connection-&gt;m_clt_buf );</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> BUFFER_FULL:</span><br><span class="line">                    &#123;</span><br><span class="line">                        modfd( m_epollfd, srvfd, EPOLLOUT );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> IOERR:</span><br><span class="line">                    <span class="keyword">case</span> CLOSED:</span><br><span class="line">                    &#123;</span><br><span class="line">                        free_conn( connection );</span><br><span class="line">                        <span class="keyword">return</span> CLOSED;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>( connection-&gt;m_srv_closed )</span><br><span class="line">                &#123;</span><br><span class="line">                    free_conn( connection );</span><br><span class="line">                    <span class="keyword">return</span> CLOSED;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> WRITE:</span><br><span class="line">            &#123;</span><br><span class="line">                RET_CODE res = connection-&gt;write_clt();</span><br><span class="line">                <span class="keyword">switch</span>( res )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> TRY_AGAIN:</span><br><span class="line">                    &#123;</span><br><span class="line">                        modfd( m_epollfd, fd, EPOLLOUT );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> BUFFER_EMPTY:</span><br><span class="line">                    &#123;</span><br><span class="line">                        modfd( m_epollfd, srvfd, EPOLLIN );</span><br><span class="line">                        modfd( m_epollfd, fd, EPOLLIN );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> IOERR:</span><br><span class="line">                    <span class="keyword">case</span> CLOSED:</span><br><span class="line">                    &#123;</span><br><span class="line">                        free_conn( connection );</span><br><span class="line">                        <span class="keyword">return</span> CLOSED;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>( connection-&gt;m_srv_closed )</span><br><span class="line">                &#123;</span><br><span class="line">                    free_conn( connection );</span><br><span class="line">                    <span class="keyword">return</span> CLOSED;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"other operation not support yet"</span> );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( connection-&gt;m_srvfd == fd )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cltfd = connection-&gt;m_cltfd;</span><br><span class="line">        <span class="keyword">switch</span>( type )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> READ:</span><br><span class="line">            &#123;</span><br><span class="line">                RET_CODE res = connection-&gt;read_srv();</span><br><span class="line">                <span class="keyword">switch</span>( res )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> OK:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">log</span>( LOG_DEBUG, __FILE__, __LINE__, <span class="string">"content read from server: %s"</span>, connection-&gt;m_srv_buf );</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> BUFFER_FULL:</span><br><span class="line">                    &#123;</span><br><span class="line">                        modfd( m_epollfd, cltfd, EPOLLOUT );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> IOERR:</span><br><span class="line">                    <span class="keyword">case</span> CLOSED:</span><br><span class="line">                    &#123;</span><br><span class="line">                        modfd( m_epollfd, cltfd, EPOLLOUT );</span><br><span class="line">                        connection-&gt;m_srv_closed = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> WRITE:</span><br><span class="line">            &#123;</span><br><span class="line">                RET_CODE res = connection-&gt;write_srv();</span><br><span class="line">                <span class="keyword">switch</span>( res )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">case</span> TRY_AGAIN:</span><br><span class="line">                    &#123;</span><br><span class="line">                        modfd( m_epollfd, fd, EPOLLOUT );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> BUFFER_EMPTY:</span><br><span class="line">                    &#123;</span><br><span class="line">                        modfd( m_epollfd, cltfd, EPOLLIN );</span><br><span class="line">                        modfd( m_epollfd, fd, EPOLLIN );</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> IOERR:</span><br><span class="line">                    <span class="keyword">case</span> CLOSED:</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        if( connection-&gt;m_srv_write_idx == connection-&gt;m_srvread_idx )</span></span><br><span class="line"><span class="comment">                        &#123;</span></span><br><span class="line"><span class="comment">                            free_conn( connection );</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                        else</span></span><br><span class="line"><span class="comment">                        &#123;</span></span><br><span class="line"><span class="comment">                            modfd( m_epollfd, cltfd, EPOLLOUT );</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        modfd( m_epollfd, cltfd, EPOLLOUT );</span><br><span class="line">                        connection-&gt;m_srv_closed = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">log</span>( LOG_ERR, __FILE__, __LINE__, <span class="string">"%s"</span>, <span class="string">"other operation not support yet"</span> );</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NOTHING;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;fdwrapper&quot;&gt;&lt;a href=&quot;#fdwrapper&quot; class=&quot;headerlink&quot; title=&quot;fdwrapper&quot;&gt;&lt;/a&gt;fdwrapper&lt;/h2&gt;&lt;p&gt;都是些辅助函数。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;
      
    
    </summary>
    
      <category term="网络编程" scheme="http://ywqzzy.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="c++ 网络编程 负载均衡 springsnail" scheme="http://ywqzzy.github.io/tags/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1-springsnail/"/>
    
  </entry>
  
  <entry>
    <title>Liso(2) httpServer</title>
    <link href="http://ywqzzy.github.io/2020/10/29/Liso-2-httpServer/"/>
    <id>http://ywqzzy.github.io/2020/10/29/Liso-2-httpServer/</id>
    <published>2020-10-29T09:03:36.000Z</published>
    <updated>2020-10-29T13:53:44.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><p>增加 Log 功能方便调试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LOG_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整个项目的全局变量</span></span><br><span class="line"><span class="keyword">char</span> *logfile;  <span class="comment">// 文件名</span></span><br><span class="line">FILE *fp;       <span class="comment">// 文件 handler</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_log</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dump_log</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close_log</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>实现比较简单，就是往全局文件里 dump log 字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化日志文件</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_log</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fp = fopen(logfile, <span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[ERROR] log file can not be created"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入日志文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dump_log</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> tmp = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>* <span class="title">cur_time</span> = <span class="title">localtime</span>(&amp;<span class="title">tmp</span>);</span></span><br><span class="line">    <span class="keyword">if</span> (!cur_time)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> arg_buffer[LOG_BUFFER_SIZE];</span><br><span class="line">    <span class="built_in">memset</span>(arg_buffer, <span class="string">'\0'</span>, LOG_BUFFER_SIZE);</span><br><span class="line">    strftime(arg_buffer, LOG_BUFFER_SIZE - <span class="number">1</span>, <span class="string">"[ %x %X ] "</span>, cur_time);</span><br><span class="line"></span><br><span class="line">    fwrite(arg_buffer, <span class="keyword">sizeof</span>(arg_buffer), <span class="number">1</span>, fp);</span><br><span class="line"></span><br><span class="line">    va_list(args);</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    <span class="built_in">vfprintf</span>(fp, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">"\n"</span>);</span><br><span class="line">    fflush(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭日志文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close_log</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>解析 http 协议采用 flex 和 bison 实现</p><h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __RESPONSE__H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __RESPONSE__H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../parse/parse.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../client_pool/client_pool.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../io/io.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">handle_http_request</span><span class="params">(<span class="keyword">int</span> clientfd, <span class="keyword">char</span>* buf, <span class="keyword">int</span> nbytes)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">response_get</span><span class="params">(<span class="keyword">int</span> clientfd, Request* request)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">response_head</span><span class="params">(<span class="keyword">int</span> clientfd, Request* request)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">response_post</span><span class="params">(<span class="keyword">int</span> clientfd, Request* request)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_mime_type</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *mime, <span class="keyword">char</span> *type)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_header_value</span><span class="params">(Request *request, <span class="keyword">const</span> <span class="keyword">char</span> *hname, <span class="keyword">char</span> *hvalue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response404</span><span class="params">(<span class="keyword">int</span> clientfd, <span class="keyword">char</span> *response)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response501</span><span class="params">(<span class="keyword">int</span> clientfd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response505</span><span class="params">(<span class="keyword">int</span> clientfd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response400</span><span class="params">(<span class="keyword">int</span> clientfd)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"response.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *WWW;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* server_name = <span class="string">"liso/1.0"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* default_index_file = <span class="string">"index.html"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* http_version = <span class="string">"HTTP/1.1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理http请求</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">handle_http_request</span><span class="params">(<span class="keyword">int</span> clientfd, <span class="keyword">char</span>* buf, <span class="keyword">int</span> nbytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Request *request = parse(buf, nbytes, clientfd);</span><br><span class="line">    <span class="comment">// 错误的请求</span></span><br><span class="line">    <span class="keyword">if</span> (request == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        response400(clientfd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不支持的HTTP版本</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(http_version, request-&gt;http_version))</span><br><span class="line">    &#123;</span><br><span class="line">        response505(clientfd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(request-&gt;http_method, <span class="string">"POST"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        response_post(clientfd, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(request-&gt;http_method, <span class="string">"GET"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        response_get(clientfd, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(request-&gt;http_method, <span class="string">"HEAD"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        response_head(clientfd, request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        response501(clientfd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">response_get</span><span class="params">(<span class="keyword">int</span> clientfd, Request* request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> response[SIZE];</span><br><span class="line">    <span class="keyword">char</span> fullpath[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">char</span> extension[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> mime_type[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> curr_time[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">char</span> last_modified[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">size_t</span> content_length;</span><br><span class="line">    <span class="keyword">char</span> content_len_str[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> connection_header_val[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(fullpath, WWW);</span><br><span class="line">    <span class="built_in">strcat</span>(fullpath, request-&gt;http_uri);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_dir(fullpath))</span><br><span class="line">        <span class="built_in">strcat</span>(fullpath, default_index_file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有那个文件就返回404</span></span><br><span class="line">    <span class="keyword">if</span> (access(fullpath, F_OK) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dump_log(<span class="string">"[response] request file not found\n"</span>);</span><br><span class="line">        response404(clientfd, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到 content type</span></span><br><span class="line">    get_extension(fullpath, extension);</span><br><span class="line">    get_mime_type(extension, mime_type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到 content length</span></span><br><span class="line">    content_length = get_file_len(fullpath);</span><br><span class="line">    <span class="built_in">sprintf</span>(content_len_str, <span class="string">"%zu"</span>, content_length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到当前时间</span></span><br><span class="line">    get_curr_time(curr_time, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到最后修改时间</span></span><br><span class="line">    get_flmodified(fullpath, last_modified, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 response</span></span><br><span class="line">    <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">" 200 OK\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Server: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, server_name);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Date: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, curr_time);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Content-Length: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, content_len_str);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Content-type: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, mime_type);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Last-modified: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, last_modified);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查connect是什么值</span></span><br><span class="line">    <span class="built_in">memset</span>(connection_header_val, <span class="number">0</span>, <span class="keyword">sizeof</span>(connection_header_val));</span><br><span class="line">    get_header_value(request, <span class="string">"Connection"</span>, connection_header_val);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(connection_header_val, <span class="string">"close"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(response, <span class="string">"Connection: close\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(response, <span class="string">"Connection: keep-alive\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// printf("[response] response = \n%s\n", response);</span></span><br><span class="line">    <span class="comment">// printf("[response] fullpath = %s\n", fullpath);</span></span><br><span class="line"></span><br><span class="line">    Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line"></span><br><span class="line">    send_file_to_client(clientfd, fullpath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">response_head</span><span class="params">(<span class="keyword">int</span> clientfd, Request *request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> response[SIZE];</span><br><span class="line">    <span class="keyword">char</span> fullpath[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">char</span> extension[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> mime_type[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">char</span> curr_time[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">char</span> last_modified[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">size_t</span> content_length;</span><br><span class="line">    <span class="keyword">char</span> content_len_str[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> connection_header_val[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcpy</span>(fullpath, WWW);</span><br><span class="line">    <span class="built_in">strcat</span>(fullpath, request-&gt;http_uri);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_dir(fullpath))</span><br><span class="line">        <span class="built_in">strcat</span>(fullpath, default_index_file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有那个文件就返回404</span></span><br><span class="line">    <span class="keyword">if</span> (access(fullpath, F_OK) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dump_log(<span class="string">"[response] request file not found\n"</span>);</span><br><span class="line">        response404(clientfd, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到 content type</span></span><br><span class="line">    get_extension(fullpath, extension);</span><br><span class="line">    get_mime_type(extension, mime_type);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到 content length</span></span><br><span class="line">    content_length = get_file_len(fullpath);</span><br><span class="line">    <span class="built_in">sprintf</span>(content_len_str, <span class="string">"%zu"</span>, content_length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到当前时间</span></span><br><span class="line">    get_curr_time(curr_time, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到最后修改时间</span></span><br><span class="line">    get_flmodified(fullpath, last_modified, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 response</span></span><br><span class="line">    <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">" 200 OK\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Server: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, server_name);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Date: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, curr_time);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Content-Length: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, content_len_str);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Content-type: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, mime_type);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Last-modified: "</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, last_modified);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查connect是什么值</span></span><br><span class="line">    <span class="built_in">memset</span>(connection_header_val, <span class="number">0</span>, <span class="keyword">sizeof</span>(connection_header_val));</span><br><span class="line">    get_header_value(request, <span class="string">"Connection"</span>, connection_header_val);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(connection_header_val, <span class="string">"close"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(response, <span class="string">"Connection: close\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(response, <span class="string">"Connection: keep-alive\r\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">response_post</span><span class="params">(<span class="keyword">int</span> clientfd, Request *request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> response[SIZE];</span><br><span class="line">    <span class="keyword">char</span> content_length[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(content_length, <span class="number">0</span>, <span class="keyword">sizeof</span>(content_length));</span><br><span class="line">    get_header_value(request, <span class="string">"Content-Length"</span>, content_length);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(content_length) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">        <span class="built_in">strcat</span>(response, <span class="string">" 401 Length Reqired\r\n"</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">        Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">" 200 OK\r\n"</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"\r\n"</span>);</span><br><span class="line"></span><br><span class="line">    Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据扩展名确定MIME类型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_mime_type</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *mime, <span class="keyword">char</span> *type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(mime, <span class="string">"html"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(type, <span class="string">"text/html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(mime, <span class="string">"css"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(type, <span class="string">"text/css"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(mime, <span class="string">"png"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(type, <span class="string">"image/png"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(mime, <span class="string">"jpeg"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(type, <span class="string">"image/jpeg"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(mime, <span class="string">"gif"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(type, <span class="string">"image/gif"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(type, <span class="string">"application/octet-stream"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据给定键，设置值</span></span><br><span class="line"><span class="comment">// 如果不存在就不设置hvalue</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_header_value</span><span class="params">(Request *request, <span class="keyword">const</span> <span class="keyword">char</span> *hname, <span class="keyword">char</span> *hvalue)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; request-&gt;header_count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(request-&gt;headers[i].header_name, hname))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(hvalue, request-&gt;headers[i].header_value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有请求的指定文件，返回404</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response404</span><span class="params">(<span class="keyword">int</span> clientfd, <span class="keyword">char</span> *response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">" 404 Not Found\r\n\r\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[response] response = \n%s\n"</span>, response);</span><br><span class="line">    Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未实现的请求功能，返回501</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response501</span><span class="params">(<span class="keyword">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> response[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">" 501 Not Implemented\r\n\r\n"</span>);</span><br><span class="line">    <span class="comment">// printf("[response] response = \n%s\n", response);</span></span><br><span class="line">    Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不支持的HTTP版本</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response505</span><span class="params">(<span class="keyword">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> response[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">" 505 HTTP Version not supported\r\n"</span>);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">"Connection: close\r\n"</span>);</span><br><span class="line">    <span class="comment">// printf("[response] response = \n%s\n", response);</span></span><br><span class="line">    Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">response400</span><span class="params">(<span class="keyword">int</span> clientfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> response[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">strcat</span>(response, http_version);</span><br><span class="line">    <span class="built_in">strcat</span>(response, <span class="string">" 400 Bad request\r\n"</span>);</span><br><span class="line">    <span class="comment">// printf("[response] response = \n%s\n", response);</span></span><br><span class="line">    Sendn(clientfd, response, <span class="built_in">strlen</span>(response));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/liu-jianhao/TinyWebServer" target="_blank" rel="noopener">TinyWebServer</a></li><li><a href="http://www.andrew.cmu.edu/course/15-441-f12/index/labs_index.html" target="_blank" rel="noopener">15-441</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Log&quot;&gt;&lt;a href=&quot;#Log&quot; class=&quot;headerlink&quot; title=&quot;Log&quot;&gt;&lt;/a&gt;Log&lt;/h2&gt;&lt;p&gt;增加 Log 功能方便调试。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="网络编程" scheme="http://ywqzzy.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="c 网络编程 liso" scheme="http://ywqzzy.github.io/tags/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-liso/"/>
    
  </entry>
  
  <entry>
    <title>网络编程通用结构体</title>
    <link href="http://ywqzzy.github.io/2020/10/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <id>http://ywqzzy.github.io/2020/10/29/网络编程通用结构体/</id>
    <published>2020-10-29T08:36:58.000Z</published>
    <updated>2020-10-29T08:50:35.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPV4"><a href="#IPV4" class="headerlink" title="IPV4"></a>IPV4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">       <span class="keyword">sa_family_t</span> sin_family;             <span class="comment">/* AF_INET */</span></span><br><span class="line">       <span class="keyword">in_port_t</span> sin_port;                 <span class="comment">/* Port number.  */</span></span><br><span class="line">       <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span>            <span class="comment">/* Internet address.  */</span></span><br><span class="line">  </span><br><span class="line">       <span class="comment">/* Pad to size of `struct sockaddr'.  */</span></span><br><span class="line">       <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="keyword">sizeof</span> (struct sockaddr) -</span><br><span class="line">                              <span class="keyword">sizeof</span> (<span class="keyword">sa_family_t</span>) -</span><br><span class="line">                              <span class="keyword">sizeof</span> (<span class="keyword">in_port_t</span>) -</span><br><span class="line">                             <span class="keyword">sizeof</span> (struct in_addr)];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> <span class="keyword">in_addr_t</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>  &#123;</span></span><br><span class="line">     <span class="keyword">in_addr_t</span> s_addr;                    <span class="comment">/* IPv4 address */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 占据 16 个字节</span></span><br></pre></td></tr></table></figure><h2 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span> &#123;</span></span><br><span class="line">     <span class="keyword">sa_family_t</span> sin6_family;    <span class="comment">/* AF_INET6 */</span></span><br><span class="line">     <span class="keyword">in_port_t</span> sin6_port;        <span class="comment">/* Transport layer port # */</span></span><br><span class="line">     <span class="keyword">uint32_t</span> sin6_flowinfo;     <span class="comment">/* IPv6 flow information */</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> <span class="title">sin6_addr</span>;</span>  <span class="comment">/* IPv6 address */</span></span><br><span class="line">     <span class="keyword">uint32_t</span> sin6_scope_id;     <span class="comment">/* IPv6 scope-id */</span></span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">in6_addr</span> &#123;</span></span><br><span class="line">     <span class="keyword">union</span> &#123;</span><br><span class="line">         <span class="keyword">uint8_t</span> u6_addr8[<span class="number">16</span>];</span><br><span class="line">         <span class="keyword">uint16_t</span> u6_addr16[<span class="number">8</span>];</span><br><span class="line">         <span class="keyword">uint32_t</span> u6_addr32[<span class="number">4</span>];</span><br><span class="line">     &#125; in6_u;</span><br><span class="line"> </span><br><span class="line">     <span class="meta">#<span class="meta-keyword">define</span> s6_addr                 in6_u.u6_addr8</span></span><br><span class="line">     <span class="meta">#<span class="meta-keyword">define</span> s6_addr16               in6_u.u6_addr16</span></span><br><span class="line">     <span class="meta">#<span class="meta-keyword">define</span> s6_addr32               in6_u.u6_addr32</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><h2 id="通用结构体"><a href="#通用结构体" class="headerlink" title="通用结构体"></a>通用结构体</h2><h4 id="sockaddr-16字节"><a href="#sockaddr-16字节" class="headerlink" title="sockaddr 16字节"></a>sockaddr 16字节</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span> </span><br><span class="line">     <span class="keyword">sa_family_t</span> sa_family;       <span class="comment">/* Address family */</span></span><br><span class="line">     <span class="keyword">char</span> sa_data[<span class="number">14</span>];            <span class="comment">/* protocol-specific address */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="sockaddr-storage-128字节"><a href="#sockaddr-storage-128字节" class="headerlink" title="sockaddr_storage 128字节"></a>sockaddr_storage 128字节</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* Structure large enough to hold any socket address </span></span><br><span class="line"><span class="comment">  (with the historical exception of AF_UNIX). 128 bytes reserved.  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> ULONG_MAX &gt; 0xffffffff</span></span><br><span class="line">  <span class="meta"># <span class="meta-keyword">define</span> __ss_aligntype __uint64_t</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="meta"># <span class="meta-keyword">define</span> __ss_aligntype __uint32_t</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">define</span> _SS_SIZE        128</span></span><br><span class="line"> <span class="meta">#<span class="meta-keyword">define</span> _SS_PADSIZE     (_SS_SIZE - (2 * sizeof (__ss_aligntype)))</span></span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span></span></span><br><span class="line"><span class="class"> &#123;</span></span><br><span class="line">     <span class="keyword">sa_family_t</span> ss_family;      <span class="comment">/* Address family */</span></span><br><span class="line">     __ss_aligntype __ss_align;  <span class="comment">/* Force desired alignment.  */</span></span><br><span class="line">     <span class="keyword">char</span> __ss_padding[_SS_PADSIZE];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IPV4&quot;&gt;&lt;a href=&quot;#IPV4&quot; class=&quot;headerlink&quot; title=&quot;IPV4&quot;&gt;&lt;/a&gt;IPV4&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Liso(1) echo server</title>
    <link href="http://ywqzzy.github.io/2020/10/29/Liso-1-echo-server/"/>
    <id>http://ywqzzy.github.io/2020/10/29/Liso-1-echo-server/</id>
    <published>2020-10-29T08:11:28.000Z</published>
    <updated>2020-10-29T09:03:12.283Z</updated>
    
    <content type="html"><![CDATA[<p>liujianhao 带佬的 git repo 真的干货满满，这波开始 Liso 的源码阅读。</p><p>首先看 client_pool, 其中管理了连接到 server 的 client 信息。</p><h2 id="Client-pool"><a href="#Client-pool" class="headerlink" title="Client pool"></a>Client pool</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __SERVER_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __SERVER_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"io.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户池</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">// 全部</span></span><br><span class="line">    fd_set all_set;</span><br><span class="line">    <span class="comment">// 准备要读的</span></span><br><span class="line">    fd_set read_fds;</span><br><span class="line">    <span class="comment">// 最大值</span></span><br><span class="line">    <span class="keyword">int</span> maxfd;</span><br><span class="line">    <span class="comment">// 已经准备的个数</span></span><br><span class="line">    <span class="keyword">int</span> nready;</span><br><span class="line">    <span class="comment">// 在数组中可获得的最大下标</span></span><br><span class="line">    <span class="keyword">int</span> maxi;</span><br><span class="line">    <span class="comment">// 客户数组</span></span><br><span class="line">    <span class="keyword">int</span> client_fd[FD_SETSIZE];</span><br><span class="line">&#125; client_pool;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_pool</span><span class="params">(<span class="keyword">int</span> listenfd, client_pool *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_client_to_pool</span><span class="params">(<span class="keyword">int</span> newfd, client_pool *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_clients</span><span class="params">(client_pool *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_client</span><span class="params">(<span class="keyword">int</span> clientfd, <span class="keyword">int</span> idx, client_pool *p)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="初始化客户池"><a href="#初始化客户池" class="headerlink" title="初始化客户池"></a>初始化客户池</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化客户池，刚开始只有 listenfd 才是需要监听的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_pool</span><span class="params">(<span class="keyword">int</span> listenfd, client_pool *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FD_ZERO(&amp;p-&gt;all_set);</span><br><span class="line">    FD_ZERO(&amp;p-&gt;read_fds);</span><br><span class="line">    FD_SET(listenfd, &amp;p-&gt;all_set);</span><br><span class="line">    p-&gt;maxfd = listenfd;</span><br><span class="line">    p-&gt;nready = <span class="number">0</span>;</span><br><span class="line">    p-&gt;maxi = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; FD_SETSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// -1表示这个位置还没被占用</span></span><br><span class="line">        p-&gt;client_fd[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加-client"><a href="#增加-client" class="headerlink" title="增加 client"></a>增加 client</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加客户套接字文件描述符到客户池</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_client_to_pool</span><span class="params">(<span class="keyword">int</span> newfd, client_pool *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    p-&gt;nready--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FD_SETSIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 先在数组中找到位置存储新到来的fd</span></span><br><span class="line">        <span class="keyword">if</span> (p-&gt;client_fd[i] &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            p-&gt;client_fd[i] = newfd;</span><br><span class="line">            FD_SET(newfd, &amp;p-&gt;all_set);</span><br><span class="line">            p-&gt;maxfd = (newfd &gt; p-&gt;maxfd) ? newfd : p-&gt;maxfd;</span><br><span class="line">            p-&gt;maxi = (i &gt; p-&gt;maxi) ? i : p-&gt;maxi;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 超过限制</span></span><br><span class="line">    <span class="keyword">if</span> (i == FD_SETSIZE)</span><br><span class="line">    &#123;</span><br><span class="line">        printlog(<span class="string">"[Client pool] Too many clients!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除-client"><a href="#删除-client" class="headerlink" title="删除 client"></a>删除 client</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从客户池中删除指定fd</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear_client</span><span class="params">(<span class="keyword">int</span> client_fd, <span class="keyword">int</span> idx, client_pool *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    close(client_fd);</span><br><span class="line">    FD_CLR(client_fd, &amp;p-&gt;all_set);</span><br><span class="line">    p-&gt;client_fd[idx] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="handle-clients"><a href="#handle-clients" class="headerlink" title="handle clients"></a>handle clients</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_clients</span><span class="params">(client_pool *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, nbytes, clientfd;</span><br><span class="line">    <span class="keyword">char</span> buf[BUF_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; (i &lt;= p-&gt;maxi) &amp;&amp; (p-&gt;nready &gt; <span class="number">0</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        clientfd = p-&gt;client_fd[i];</span><br><span class="line">        <span class="keyword">if</span> (clientfd &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If client is ready, read request from it and echo it back */</span></span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(clientfd, &amp;p-&gt;read_fds))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 设置为非阻塞</span></span><br><span class="line">            set_fl(clientfd, O_NONBLOCK);</span><br><span class="line">            <span class="comment">// 接受数据</span></span><br><span class="line">            nbytes = recv(clientfd, buf, BUF_SIZE, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (nbytes &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                printlog(<span class="string">"[Client pool] Receive %d bytes from client on socket %d"</span>, nbytes, clientfd);</span><br><span class="line">                Sendn(clientfd, buf, nbytes);</span><br><span class="line">                clr_fl(clientfd, O_NONBLOCK); <span class="comment">// clear nonblock</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 客户端关闭了连接</span></span><br><span class="line">                <span class="keyword">if</span> (nbytes == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    printlog(<span class="string">"[Client pool] Connection closed by client on socket %d"</span>, clientfd);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 有错误</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    printlog(<span class="string">"[Client pool] Exception on recv() from client on socket %d"</span>, clientfd);</span><br><span class="line">                &#125;</span><br><span class="line">                clear_client(clientfd, i, p);</span><br><span class="line">            &#125;</span><br><span class="line">            p-&gt;nready--;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;nready &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span>; </span><br><span class="line">        &#125;               </span><br><span class="line">    &#125;                  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><p>先了解下几种不同的 sockaddr 结构体。可以参考博客<a href="https://ywqzzy.github.io/2020/10/29/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8%E7%BB%93%E6%9E%84%E4%BD%93/">网络编程通用结构体</a></p><p>然后看 io 的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __IO_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __IO_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"utilities.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SOCKET_API_ERR_MSG <span class="meta-string">"[Error in socket_api]"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">sockaddr</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sockaddr_in</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in6</span> <span class="title">sockaddr_in6</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_storage</span> <span class="title">sockaddr_storage</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">addrinfo</span> <span class="title">addrinfo</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open_listenfd</span><span class="params">(<span class="keyword">int</span> port)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendn</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sendn</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">const</span> <span class="keyword">void</span> *, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="open-listenfd"><a href="#open-listenfd" class="headerlink" title="open_listenfd"></a>open_listenfd</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听指定端口</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open_listenfd</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> listenfd;</span><br><span class="line">    <span class="keyword">int</span> yes = <span class="number">1</span>;</span><br><span class="line">    sockaddr_in serveraddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建套接字</span></span><br><span class="line">    <span class="keyword">if</span> ((listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printlog(<span class="string">"%s create listener socket"</span>, SOCKET_API_ERR_MSG);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消除 "Address already in use" 这种错误</span></span><br><span class="line">    <span class="keyword">if</span> (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printlog(<span class="string">"%s set SO_REUSEADDR"</span>, SOCKET_API_ERR_MSG);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;serveraddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(sockaddr));</span><br><span class="line">    serveraddr.sin_family = AF_INET;</span><br><span class="line">    serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    serveraddr.sin_port = htons((<span class="keyword">unsigned</span> <span class="keyword">short</span>)port);</span><br><span class="line">    <span class="keyword">if</span> (bind(listenfd, (sockaddr *)&amp;serveraddr, <span class="keyword">sizeof</span>(serveraddr)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printlog(<span class="string">"%s bind listenser socket"</span>, SOCKET_API_ERR_MSG);</span><br><span class="line">        close(listenfd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(listenfd, <span class="number">10</span>) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printlog(<span class="string">"%s listen on listener socket"</span>, SOCKET_API_ERR_MSG);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listenfd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="send"><a href="#send" class="headerlink" title="send"></a>send</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// send的包裹函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendn</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> nleft = n;</span><br><span class="line">    <span class="keyword">ssize_t</span> nwritten = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ptr = p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (nleft &gt; <span class="number">0</span>)  <span class="comment">// 全部发完</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((nwritten = send(fd, ptr + nwritten, n, <span class="number">0</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nwritten &lt; <span class="number">0</span> &amp;&amp; errno == EINTR)</span><br><span class="line">            &#123;</span><br><span class="line">                nwritten = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        nleft -= nwritten;</span><br><span class="line">        ptr += nwritten;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sendn的包裹函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sendn</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sendn(fd, ptr, n) != n)</span><br><span class="line">        err_sys(<span class="string">"sendn error"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="liso-c"><a href="#liso-c" class="headerlink" title="liso.c"></a>liso.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"client_pool.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"io.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printlog(<span class="string">"Usage: %s ports"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> port = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    client_pool pool;</span><br><span class="line">    <span class="keyword">int</span> listenfd, newfd;</span><br><span class="line">    sockaddr_in clientaddr;</span><br><span class="line">    <span class="keyword">socklen_t</span> addrlen = <span class="keyword">sizeof</span>(sockaddr_in);</span><br><span class="line"></span><br><span class="line">    printlog(<span class="string">"[Main] ----- Liso Echo Server -----\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((listenfd = open_listenfd(port)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        printlog(<span class="string">"open_listen error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    printlog(<span class="string">"[Main] Create listenfd sucessfully"</span>);</span><br><span class="line"></span><br><span class="line">    init_pool(listenfd, &amp;pool);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pool.read_fds = pool.all_set;</span><br><span class="line">        pool.nready = select(pool.maxfd+<span class="number">1</span>, &amp;pool.read_fds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pool.nready == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pool.nready &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            printlog(<span class="string">"[Main] Select error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(FD_ISSET(listenfd, &amp;pool.read_fds))</span><br><span class="line">        &#123;</span><br><span class="line">            newfd = accept(listenfd, (sockaddr *)&amp;clientaddr, &amp;addrlen);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(newfd &lt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                printlog(<span class="string">"[Main] Accept error"</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            add_client_to_pool(newfd, &amp;pool);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(pool.nready &lt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 剩下的就是处理客户端的请求</span></span><br><span class="line">        handle_clients(&amp;pool);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码是标准的处理流程，值得借鉴。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/liu-jianhao/TinyWebServer/" target="_blank" rel="noopener">Liso</a></li><li><a href="http://www.andrew.cmu.edu/course/15-441-f12/index/labs_index.html" target="_blank" rel="noopener">15-441</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;liujianhao 带佬的 git repo 真的干货满满，这波开始 Liso 的源码阅读。&lt;/p&gt;
&lt;p&gt;首先看 client_pool, 其中管理了连接到 server 的 client 信息。&lt;/p&gt;
&lt;h2 id=&quot;Client-pool&quot;&gt;&lt;a href=&quot;#C
      
    
    </summary>
    
      <category term="网络编程" scheme="http://ywqzzy.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="c 网络编程 liso" scheme="http://ywqzzy.github.io/tags/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-liso/"/>
    
  </entry>
  
  <entry>
    <title>SimpleEpollServer源码阅读</title>
    <link href="http://ywqzzy.github.io/2020/10/29/SimpleEpollServer%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://ywqzzy.github.io/2020/10/29/SimpleEpollServer源码阅读/</id>
    <published>2020-10-29T07:23:43.000Z</published>
    <updated>2020-10-29T07:59:57.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AsyncServer"><a href="#AsyncServer" class="headerlink" title="AsyncServer"></a>AsyncServer</h2><p>首先看一下 Server 的 data member.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> listen_fd_, epoll_fd_;</span><br><span class="line">epoll_event *events_;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, ClientDescriptor *&gt; clients_;</span><br><span class="line"><span class="keyword">uint32_t</span> timeout_secs_;</span><br><span class="line"><span class="keyword">time_t</span> last_socket_check_;</span><br></pre></td></tr></table></figure><p>AsynceServer 的构造函数如下， 首先初始化了 socket 连接， 绑定端口号，设置 listenfd， 又设置了 epoll 的 event 和 nonblocking。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">AsyncServer(<span class="keyword">const</span> <span class="keyword">char</span> *listen_addr, <span class="keyword">uint16_t</span> listen_port, <span class="keyword">uint32_t</span> timeout_secs) :</span><br><span class="line">listen_fd_(<span class="number">-1</span>),</span><br><span class="line">epoll_fd_(<span class="number">-1</span>),</span><br><span class="line">timeout_secs_(timeout_secs),</span><br><span class="line">last_socket_check_(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">sockaddr_in <span class="built_in">sin</span> = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sin</span>.sin_addr.s_addr = inet_addr(listen_addr);</span><br><span class="line"><span class="built_in">sin</span>.sin_family = AF_INET;</span><br><span class="line"><span class="built_in">sin</span>.sin_port = htons(listen_port);</span><br><span class="line"></span><br><span class="line">listen_fd_ = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(listen_fd_ &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"socket() failed, error code: "</span> + <span class="built_in">std</span>::to_string(errno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bind(listen_fd_, <span class="keyword">reinterpret_cast</span>&lt;sockaddr *&gt;(&amp;<span class="built_in">sin</span>), <span class="keyword">sizeof</span>(<span class="built_in">sin</span>)))</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"bind() failed, error code: "</span> + <span class="built_in">std</span>::to_string(errno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(SetNonblocking(listen_fd_) == <span class="literal">false</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"SetNonBlocking() failed, error code: "</span> + <span class="built_in">std</span>::to_string(errno));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(listen(listen_fd_, SOMAXCONN) == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"listen() failed, error code: "</span> + <span class="built_in">std</span>::to_string(errno));</span><br><span class="line"></span><br><span class="line">epoll_fd_ = epoll_create1(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(epoll_fd_ == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"epoll_create1() failed, error code: "</span> + <span class="built_in">std</span>::to_string(errno));</span><br><span class="line"></span><br><span class="line">epoll_event e_event;</span><br><span class="line">e_event.events = EPOLLIN;</span><br><span class="line">e_event.data.fd = listen_fd_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(epoll_ctl(epoll_fd_, EPOLL_CTL_ADD, listen_fd_, &amp;e_event) == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"epoll_ctl() failed, error code: "</span> + <span class="built_in">std</span>::to_string(errno));</span><br><span class="line"></span><br><span class="line">events_ = <span class="keyword">new</span> epoll_event[<span class="number">64</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数中的 SetNonblocking 的实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SetNonblocking</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flags = fcntl(fd, F_GETFL, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(flags == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">flags |= O_NONBLOCK;  <span class="comment">// set nonblocking</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(fcntl(fd, F_SETFL, flags) == <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属于常规操作</span></span><br></pre></td></tr></table></figure><p>析构函数比较简单，就是销毁资源， 包括 listen_fd, epoll_fd 和 events。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~AsyncServer()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(listen_fd_ != <span class="number">-1</span>)</span><br><span class="line">close(listen_fd_);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(epoll_fd_ != <span class="number">-1</span>)</span><br><span class="line">close(epoll_fd_);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] events_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑在 EventLoop() 函数中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EventLoop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num_fds = epoll_wait(epoll_fd_, events_, <span class="number">64</span>, <span class="number">1000</span>);</span><br><span class="line">            <span class="comment">// 最大事件数 64， 最多等待时间 1000 ms</span></span><br><span class="line"><span class="keyword">if</span>(num_fds != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//iterate signaled fds</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_fds; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//notifications on listening fd are incoming client connections</span></span><br><span class="line"><span class="keyword">if</span>(events_[i].data.fd == listen_fd_)</span><br><span class="line">&#123;</span><br><span class="line">HandleAccept();  <span class="comment">// 处理用户连接</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">HandleClient(events_[i]); <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//perform cleanup every second and remove timed-out sockets</span></span><br><span class="line">            <span class="comment">// 处理空闲客户连接 采用心跳判断死活</span></span><br><span class="line"><span class="keyword">if</span>((last_socket_check_ + <span class="number">1</span>) &lt; time(<span class="number">0</span>) &amp;&amp; clients_.size() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, ClientDescriptor *&gt;::iterator it = clients_.begin();</span><br><span class="line"><span class="keyword">while</span>(it != clients_.end()) </span><br><span class="line">&#123;</span><br><span class="line">ClientDescriptor *client = (*it).second;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!client-&gt;HeartBeat())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if HeartBeat() returns false remove fd from map and close</span></span><br><span class="line">it = clients_.erase(it);</span><br><span class="line">client-&gt;ServerClose();</span><br><span class="line"><span class="keyword">delete</span> client;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">it++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">last_socket_check_ = time(<span class="number">0</span>); <span class="comment">// 更新 check 时间</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面关注当有客户端尝试连接的时候调用的 HandleAccept() 函数。也就是说当 serverfd 上发生 EPOLLIN  event 后，会调用  HandleAccept。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">HandleAccept</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sockaddr_in client_sin;</span><br><span class="line"><span class="keyword">socklen_t</span> sin_size = <span class="keyword">sizeof</span>(client_sin);</span><br><span class="line">ClientDescriptorType *client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> client_fd = accept(listen_fd_, <span class="keyword">reinterpret_cast</span>&lt;sockaddr *&gt;(&amp;client_sin), &amp;sin_size);</span><br><span class="line">        <span class="comment">// 获取 client_fd</span></span><br><span class="line"><span class="keyword">if</span>(client_fd == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"accept() failed, error code: %d\n"</span>, errno);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 设为非阻塞 </span></span><br><span class="line"><span class="keyword">if</span>(!SetNonblocking(client_fd))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"failed to put fd into non-blocking mode, error code: %d\n"</span>, errno);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//allocate and initialize a new descriptor for the client</span></span><br><span class="line">client = <span class="keyword">new</span> ClientDescriptorType(client_fd, client_sin.sin_addr, </span><br><span class="line">  ntohs(client_sin.sin_port), </span><br><span class="line">  timeout_secs_);</span><br><span class="line"></span><br><span class="line">epoll_event ev;</span><br><span class="line">ev.events = EPOLLIN | EPOLLRDHUP | EPOLLET;<span class="comment">//client events will be handled in edge-triggered mode 边缘触发模式</span></span><br><span class="line">        <span class="comment">// EPOLLRDHUP 代表对端断开连接</span></span><br><span class="line">ev.data.ptr = client;<span class="comment">//we will pass client descriptor with every event</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加监听的时间</span></span><br><span class="line"><span class="keyword">if</span>(epoll_ctl(epoll_fd_, EPOLL_CTL_ADD, client_fd, &amp;ev) == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"epoll_ctl() failed, error code: %d\n"</span>, errno);</span><br><span class="line"><span class="keyword">delete</span> client;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//store new client descriptor into the map of clients</span></span><br><span class="line">clients_[client_fd] = client;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[+] new client: %s:%d\n"</span>, inet_ntoa(client_sin.sin_addr), ntohs(client_sin.sin_port));</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个 client_fd 上发生 EPOLLIN 事件时，则需要调用 HandleClient() 函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//called whenever and EPOLLIN event occurs on a client fd</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">HandleClient</span><span class="params">(epoll_event ev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//retrieve client descriptor address from the data parameter</span></span><br><span class="line">ClientDescriptor *client = <span class="keyword">reinterpret_cast</span>&lt;ClientDescriptor *&gt;(ev.data.ptr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分别对三个不同事件进行处理</span></span><br><span class="line">        <span class="comment">// EPOLLIN  EPOLLRDHUP  EPOLLOUT</span></span><br><span class="line"><span class="comment">//we got some data from the client</span></span><br><span class="line"><span class="keyword">if</span>(ev.events &amp; EPOLLIN)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!client-&gt;ReadReady())</span><br><span class="line">&#123;</span><br><span class="line">RemoveClient(client);</span><br><span class="line">client-&gt;ServerClose();</span><br><span class="line"><span class="keyword">delete</span> client;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//the client closed the connection (should be after EPOLLIN as client can send data then close)</span></span><br><span class="line"><span class="keyword">if</span>(ev.events &amp; EPOLLRDHUP)</span><br><span class="line">&#123;</span><br><span class="line">RemoveClient(client);</span><br><span class="line">client-&gt;ClientClose();</span><br><span class="line"><span class="keyword">delete</span> client;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fd is ready to be written</span></span><br><span class="line"><span class="keyword">if</span>(ev.events &amp; EPOLLOUT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!client-&gt;WriteReady())</span><br><span class="line">&#123;</span><br><span class="line">RemoveClient(client);</span><br><span class="line">client-&gt;ServerClose();</span><br><span class="line"><span class="keyword">delete</span> client;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveClient</span><span class="params">(ClientDescriptor *client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, ClientDescriptor *&gt;::iterator it = clients_.find(client-&gt;uid());</span><br><span class="line">clients_.erase(it);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ClientDescriptor"><a href="#ClientDescriptor" class="headerlink" title="ClientDescriptor"></a>ClientDescriptor</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">This is a base client descriptor and virtual methods should be implemented by a derived class.</span></span><br><span class="line"><span class="comment">Returning false from any of the methods will result in Cleanup() being called and the client </span></span><br><span class="line"><span class="comment">descriptor being deconstructed immediately.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientDescriptor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ClientDescriptor(<span class="keyword">int</span> fd, in_addr client_addr, <span class="keyword">uint16_t</span> client_port, <span class="keyword">uint32_t</span> timeout) :</span><br><span class="line">fd_(fd),</span><br><span class="line">client_addr_(client_addr),</span><br><span class="line">client_port_(client_port),</span><br><span class="line">timeout_(timeout)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~ClientDescriptor()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//called when a client fd becomes available for writing</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">ReadReady</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"ReadReady() not implemented"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//called when a client fd becomes available for reading</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">WriteReady</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"WriteReady() not implemented"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//called periodically to check if fd is still alive (used to implement timeout)</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">HeartBeat</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"HeartBeat() not implemented"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//called when the server is done with the client and the fd should be closed</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ServerClose</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"ServerClose() not implemented"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//called if the connection was forcibly closed by the client</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">ClientClose</span><span class="params">()</span> </span>&#123; <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"ClientClose() not implemented"</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client's unique id</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">uid</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> fd_;  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> fd_;</span><br><span class="line">in_addr client_addr_;</span><br><span class="line"><span class="keyword">uint16_t</span> client_port_;</span><br><span class="line"><span class="keyword">uint32_t</span> timeout_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="ExampleClient"><a href="#ExampleClient" class="headerlink" title="ExampleClient"></a>ExampleClient</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/ip.h&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ClientDescriptor.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleClient</span> :</span> <span class="keyword">public</span> ClientDescriptor</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ExampleClient(<span class="keyword">int</span> fd, in_addr client_addr, <span class="keyword">uint16_t</span> client_port, <span class="keyword">uint32_t</span> timeout) : </span><br><span class="line">ClientDescriptor(fd, client_addr, client_port, timeout),</span><br><span class="line">last_active_(time(<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ReadReady</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">WriteReady</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">HeartBeat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClientClose</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ServerClose</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">time_t</span> last_active_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ExampleClient::ReadReady()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> bytes_read;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> data_buffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//we must drain the entire read buffer as we won't get another event until client sends more data</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">bytes_read = recv(fd_, buffer, <span class="number">1024</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(bytes_read &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">data_buffer.append(buffer, bytes_read);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//client triggered EPOLLIN but sent no data (usually due to remote socket being closed)</span></span><br><span class="line"><span class="keyword">if</span>(data_buffer.length() == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[i] client %s:%d said: %s\n"</span>, inet_ntoa(client_addr_), client_port_, data_buffer.c_str());</span><br><span class="line"></span><br><span class="line">write(fd_, data_buffer.c_str(), data_buffer.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//update last active time to prevent timeout</span></span><br><span class="line">last_active_ = time(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ExampleClient::WriteReady()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">during heavy network I/O fds can become unwritable and subsequent calls to write() / send() will fail,</span></span><br><span class="line"><span class="comment">in this case the data which failed to send should be stored in a buffer and the operation should be</span></span><br><span class="line"><span class="comment">retried when WriteReady() is called to signal the fd is writable again (this is up to you to implement).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ExampleClient::HeartBeat()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//if no operations occurred during timeout period return false to signal server to close socket</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">time_t</span>&gt;(last_active_ + timeout_) &lt; time(<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[i] connection %s:%d has timed out\n"</span>, inet_ntoa(client_addr_), client_port_);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ExampleClient::ClientClose()</span><br><span class="line">&#123;</span><br><span class="line">close(fd_);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[-] connection %s:%d closed by client\n"</span>, inet_ntoa(client_addr_), client_port_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ExampleClient::ServerClose() </span><br><span class="line">&#123;</span><br><span class="line">close(fd_);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[-] connection %s:%d closed by server\n"</span>, inet_ntoa(client_addr_), client_port_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/MalwareTech/SimpleEpollServer" target="_blank" rel="noopener">SimpleEpollServer</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AsyncServer&quot;&gt;&lt;a href=&quot;#AsyncServer&quot; class=&quot;headerlink&quot; title=&quot;AsyncServer&quot;&gt;&lt;/a&gt;AsyncServer&lt;/h2&gt;&lt;p&gt;首先看一下 Server 的 data member.&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="网络编程" scheme="http://ywqzzy.github.io/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="c++ 网络编程 epoll" scheme="http://ywqzzy.github.io/tags/c-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-epoll/"/>
    
  </entry>
  
  <entry>
    <title>yfs-源码剖析（4）--Caching locks</title>
    <link href="http://ywqzzy.github.io/2020/10/29/yfs-%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%884%EF%BC%89-Caching-locks/"/>
    <id>http://ywqzzy.github.io/2020/10/29/yfs-源码剖析（4）-Caching-locks/</id>
    <published>2020-10-29T04:16:56.000Z</published>
    <updated>2020-11-03T02:41:25.364Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​    &lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hr
      
    
    </summary>
    
      <category term="yfs" scheme="http://ywqzzy.github.io/categories/yfs/"/>
    
    
      <category term="c++ yfs 分布式" scheme="http://ywqzzy.github.io/tags/c-yfs-%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>yfs-源码剖析（3）--基本文件服务2</title>
    <link href="http://ywqzzy.github.io/2020/10/29/yfs-%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%883%EF%BC%89-%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A12/"/>
    <id>http://ywqzzy.github.io/2020/10/29/yfs-源码剖析（3）-基本文件服务2/</id>
    <published>2020-10-29T02:51:54.000Z</published>
    <updated>2020-10-29T04:11:00.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mkdir-amp-unlink"><a href="#mkdir-amp-unlink" class="headerlink" title="mkdir&amp;unlink"></a>mkdir&amp;unlink</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::mkdir(inum parent, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">mode_t</span> mode, inum &amp;inum)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">LockGuard <span class="title">lg</span><span class="params">(m_lc, parent)</span></span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> dir_name;</span><br><span class="line">  <span class="keyword">if</span> (ec-&gt;get(parent, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dir_name = <span class="string">"/"</span> + <span class="built_in">std</span>::<span class="built_in">string</span>(name) + <span class="string">"/"</span>;</span><br><span class="line">  <span class="comment">// 目录已经存在</span></span><br><span class="line">  <span class="keyword">if</span> (data.find(dir_name) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> EXIST;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inum = random_inum(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">if</span> (ec-&gt;put(inum, <span class="built_in">std</span>::<span class="built_in">string</span>()) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  data.append(dir_name + filename(inum) + <span class="string">"/"</span>);</span><br><span class="line">  <span class="keyword">if</span> (ec-&gt;put(parent, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> yfs_client::unlink(inum parent, <span class="keyword">const</span> <span class="keyword">char</span>* name)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function">LockGuard <span class="title">lg</span><span class="params">(m_lc, parent)</span></span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> file_name = <span class="string">"/"</span> + <span class="built_in">std</span>::<span class="built_in">string</span>(name) + <span class="string">"/"</span>;</span><br><span class="line">  <span class="keyword">size_t</span> pos, end, len; </span><br><span class="line">  inum inum;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;get(parent, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有这个文件</span></span><br><span class="line">  <span class="keyword">if</span>((pos = data.find(file_name)) == <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> NOENT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  end = data.find_first_of(<span class="string">"/"</span>, pos+file_name.size());</span><br><span class="line">  <span class="keyword">if</span>(end == <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> NOENT;</span><br><span class="line">  &#125;</span><br><span class="line">  len = end - file_name.size() - pos;</span><br><span class="line">  inum = n2i(data.substr(pos+file_name.size(), len));</span><br><span class="line">  <span class="keyword">if</span>(!isfile(inum))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从目录中移除文件</span></span><br><span class="line">  data.erase(pos, end-pos+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;put(parent, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 删除文件</span></span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;remove(inum) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 fuse 中对应如下代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_mkdir(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> parent, <span class="keyword">const</span> <span class="keyword">char</span> *name,</span><br><span class="line">     <span class="keyword">mode_t</span> mode)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fuse_entry_param</span> <span class="title">e</span>;</span></span><br><span class="line">  <span class="comment">// In yfs, timeouts are always set to 0.0, and generations are always set to 0</span></span><br><span class="line">  e.attr_timeout = <span class="number">0.0</span>;</span><br><span class="line">  e.entry_timeout = <span class="number">0.0</span>;</span><br><span class="line">  e.generation = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// Suppress compiler warning of unused e.</span></span><br><span class="line">  (<span class="keyword">void</span>) e;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">  yfs_client::inum inum = <span class="number">0</span>;</span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  ret = yfs-&gt;mkdir(parent, name, mode, inum);</span><br><span class="line">  <span class="keyword">if</span>(ret == yfs_client::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    e.ino = inum;</span><br><span class="line">    getattr(inum, e.attr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(ret == yfs_client::EXIST)</span><br><span class="line">  &#123;</span><br><span class="line">    fuse_reply_err(req, EEXIST);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fuse_reply_entry(req, &amp;e);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  fuse_reply_err(req, ENOSYS);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove the file named @name from directory @parent.</span></span><br><span class="line"><span class="comment">// Free the file's extent.</span></span><br><span class="line"><span class="comment">// If the file doesn't exist, indicate error ENOENT.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Do *not* allow unlinking of a directory.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_unlink(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> parent, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// You fill this in for Lab 3</span></span><br><span class="line">  <span class="comment">// Success:fuse_reply_err(req, 0);</span></span><br><span class="line">  <span class="comment">// Not found:fuse_reply_err(req, ENOENT);</span></span><br><span class="line">  yfs_client::status ret = yfs-&gt;unlink(parent, name);</span><br><span class="line">  <span class="keyword">if</span>(ret == yfs_client::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    fuse_reply_err(req, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  fuse_reply_err(req, ENOENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Locking"><a href="#Locking" class="headerlink" title="Locking"></a>Locking</h2><ul><li><p>What to lock?</p><p>At one extreme you could have a single lock for the whole file system, so that operations never proceed in parallel. At the other extreme you could lock each entry in a directory, or each field in the attributes structure. Neither of these is a good idea! A single global lock prevents concurrency that would have been okay, for example CREATEs in different directories. Fine-grained locks have high overhead and make deadlock likely, since you often need to hold more than one fine-grained lock.</p><p>You should associate a lock with each inumber. Use the file or directory’s <code>inum</code> as the name of the lock (i.e. pass the <code>inum</code> to <code>acquire</code> and <code>release</code>). The convention should be that any <code>yfs_client</code> operation should acquire the lock on the file or directory it uses, perform the operation, finish updating the extent server (if the operation has side-effects), and then release the lock on the <code>inum</code>. Be careful to release locks even for error returns from <code>yfs_client</code> operations.</p><p>You’ll use your lock server from Lab 1. <code>yfs_client</code> should create and use a <code>lock_client</code> in the same way that it creates and uses its <code>extent_client</code>.</p></li><li><p>Things to watch out for:</p><p>This is the first lab that creates files using two different YFS-mounted directories. If you were not careful in earlier labs, you may find that the components that assign <code>inum</code> for newly-created files and directories choose the same identifiers. One possible way to fix this may be to seed the random number generator differently depending on the process’s <code>pid</code>. The provided code has already done such seeding for you in the <code>main</code> function of <code>fuse.cc</code>.</p><p>This is also the first lab that writes null (‘\0’) characters to files. The <code>std::string(char*)</code> constructor treats ‘\0’ as the end of the string, so if you use that constructor to hold file content or the written data, you will have trouble with this lab. Use the <code>std::string(buf, size)</code> constructor instead..</p></li></ul><p>需要对之前的 yfs_client 进行修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yfs_client</span> &#123;</span></span><br><span class="line">  extent_client *ec;</span><br><span class="line">  lock_client *m_lc;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>并且添加 lockGuard 类，实现 RAII，并且在 yfs_client 中需要加锁的地方添加 lockGuard。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockGuard</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  LockGuard(lock_client *lc, lock_protocol::<span class="keyword">lockid_t</span> lid) : m_lc(lc), m_lid(lid)</span><br><span class="line">  &#123;</span><br><span class="line">    m_lc-&gt;acquire(m_lid);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~LockGuard()</span><br><span class="line">  &#123;</span><br><span class="line">    m_lc-&gt;release(m_lid);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  lock_client *m_lc;</span><br><span class="line">  lock_protocol::<span class="keyword">lockid_t</span> m_lid;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://pdos.csail.mit.edu/archive/6.824-2012/labs/lab-3.html" target="_blank" rel="noopener">6.824 lab3</a></li><li><a href="https://liu-jianhao.github.io/2018/12/yfs%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">yfs实现第二步——实现基本文件服务</a></li><li><a href="https://github.com/liu-jianhao/yfsCpp11/tree/master/lab3" target="_blank" rel="noopener">yfsCpp11s</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mkdir-amp-unlink&quot;&gt;&lt;a href=&quot;#mkdir-amp-unlink&quot; class=&quot;headerlink&quot; title=&quot;mkdir&amp;amp;unlink&quot;&gt;&lt;/a&gt;mkdir&amp;amp;unlink&lt;/h2&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="yfs" scheme="http://ywqzzy.github.io/categories/yfs/"/>
    
    
      <category term="c++ yfs 分布式" scheme="http://ywqzzy.github.io/tags/c-yfs-%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>yfs-源码剖析（2）--基本文件服务1</title>
    <link href="http://ywqzzy.github.io/2020/10/27/yfs-%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%882%EF%BC%89-%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
    <id>http://ywqzzy.github.io/2020/10/27/yfs-源码剖析（2）-基本文件服务/</id>
    <published>2020-10-27T12:59:07.000Z</published>
    <updated>2020-10-29T02:49:48.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>extent_server 用于存储文件系统所有的数据，有多个客户端与 extent_server 进行通信。</p><p>为了实现 extent_server 就需要实现 extent_protocol, extent_client 和 extent_server。 通信流程和之前的锁服务类似。</p><h2 id="extent-protocol"><a href="#extent-protocol" class="headerlink" title="extent_protocol"></a>extent_protocol</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// extent wire protocol</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> extent_protocol_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> extent_protocol_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rpc.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">extent_protocol</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">int</span> status;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">extentid_t</span>;</span><br><span class="line">  <span class="keyword">enum</span> xxstatus &#123; OK, RPCERR, NOENT, IOERR &#125;;</span><br><span class="line">  <span class="keyword">enum</span> rpc_numbers &#123;</span><br><span class="line">    put = <span class="number">0x6001</span>,</span><br><span class="line">    get,</span><br><span class="line">    getattr,</span><br><span class="line">    remove</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">attr</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> atime;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mtime;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ctime;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> unmarshall &amp;</span><br><span class="line"><span class="keyword">operator</span>&gt;&gt;(unmarshall &amp;u, extent_protocol::attr &amp;a)</span><br><span class="line">&#123;</span><br><span class="line">  u &gt;&gt; a.atime;</span><br><span class="line">  u &gt;&gt; a.mtime;</span><br><span class="line">  u &gt;&gt; a.ctime;</span><br><span class="line">  u &gt;&gt; a.size;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> marshall &amp;</span><br><span class="line"><span class="keyword">operator</span>&lt;&lt;(marshall &amp;m, extent_protocol::attr a)</span><br><span class="line">&#123;</span><br><span class="line">  m &lt;&lt; a.atime;</span><br><span class="line">  m &lt;&lt; a.mtime;</span><br><span class="line">  m &lt;&lt; a.ctime;</span><br><span class="line">  m &lt;&lt; a.size;</span><br><span class="line">  <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="extent-client"><a href="#extent-client" class="headerlink" title="extent_client"></a>extent_client</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// extent client interface.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> extent_client_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> extent_client_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"extent_protocol.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rpc.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">extent_client</span> &#123;</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  rpcc *cl;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  extent_client(<span class="built_in">std</span>::<span class="built_in">string</span> dst);</span><br><span class="line"></span><br><span class="line">  extent_protocol::<span class="function">status <span class="title">get</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> eid, </span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="built_in">std</span>::<span class="built_in">string</span> &amp;buf)</span></span>;</span><br><span class="line">  extent_protocol::<span class="function">status <span class="title">getattr</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> eid, </span></span></span><br><span class="line"><span class="function"><span class="params">  extent_protocol::attr &amp;a)</span></span>;</span><br><span class="line">  extent_protocol::<span class="function">status <span class="title">put</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> eid, <span class="built_in">std</span>::<span class="built_in">string</span> buf)</span></span>;</span><br><span class="line">  extent_protocol::<span class="function">status <span class="title">remove</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> eid)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RPC stubs for clients to talk to extent_server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"extent_client.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The calls assume that the caller holds a lock on the extent</span></span><br><span class="line"></span><br><span class="line">extent_client::extent_client(<span class="built_in">std</span>::<span class="built_in">string</span> dst)</span><br><span class="line">&#123;</span><br><span class="line">  sockaddr_in dstsock;</span><br><span class="line">  make_sockaddr(dst.c_str(), &amp;dstsock);</span><br><span class="line">  cl = <span class="keyword">new</span> rpcc(dstsock);</span><br><span class="line">  <span class="keyword">if</span> (cl-&gt;bind() != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"extent_client: bind failed\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extent_protocol::status</span><br><span class="line">extent_client::get(extent_protocol::<span class="keyword">extentid_t</span> eid, <span class="built_in">std</span>::<span class="built_in">string</span> &amp;buf)</span><br><span class="line">&#123;</span><br><span class="line">  extent_protocol::status ret = extent_protocol::OK;</span><br><span class="line">  ret = cl-&gt;call(extent_protocol::get, eid, buf);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extent_protocol::status</span><br><span class="line">extent_client::getattr(extent_protocol::<span class="keyword">extentid_t</span> eid, </span><br><span class="line">       extent_protocol::attr &amp;attr)</span><br><span class="line">&#123;</span><br><span class="line">  extent_protocol::status ret = extent_protocol::OK;</span><br><span class="line">  ret = cl-&gt;call(extent_protocol::getattr, eid, attr);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extent_protocol::status</span><br><span class="line">extent_client::put(extent_protocol::<span class="keyword">extentid_t</span> eid, <span class="built_in">std</span>::<span class="built_in">string</span> buf)</span><br><span class="line">&#123;</span><br><span class="line">  extent_protocol::status ret = extent_protocol::OK;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  ret = cl-&gt;call(extent_protocol::put, eid, buf, r);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extent_protocol::status</span><br><span class="line">extent_client::remove(extent_protocol::<span class="keyword">extentid_t</span> eid)</span><br><span class="line">&#123;</span><br><span class="line">  extent_protocol::status ret = extent_protocol::OK;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  ret = cl-&gt;call(extent_protocol::remove, eid, r);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 都是套路代码 为了 rpc。。。</span></span><br></pre></td></tr></table></figure><p>重点在于下面的 extent_server</p><h2 id="extent-server"><a href="#extent-server" class="headerlink" title="extent_server"></a>extent_server</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> extent_server_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> extent_server_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"extent_protocol.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">extent</span> &#123;</span></span><br><span class="line">  <span class="comment">// 数据</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data;</span><br><span class="line">  <span class="comment">// 数据属性</span></span><br><span class="line">  extent_protocol::attr attr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">extent_server</span> &#123;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  extent_server();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">put</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> id, <span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> id, <span class="built_in">std</span>::<span class="built_in">string</span> &amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getattr</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> id, extent_protocol::attr &amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">remove</span><span class="params">(extent_protocol::<span class="keyword">extentid_t</span> id, <span class="keyword">int</span> &amp;)</span></span>;  <span class="comment">// 对应 client 的 stub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">std</span>::mutex m_mutex;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;extent_protocol::<span class="keyword">extentid_t</span>, extent&gt; m_dataMap;  <span class="comment">// 暂时类似 kv-store</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// the extent server implementation</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"extent_server.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">extent_server::extent_server()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> ret;</span><br><span class="line">  put(<span class="number">1</span>, <span class="string">""</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> extent_server::put(extent_protocol::<span class="keyword">extentid_t</span> id, <span class="built_in">std</span>::<span class="built_in">string</span> buf, <span class="keyword">int</span> &amp;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// You fill this in for Lab 2.</span></span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lg(m_mutex);</span><br><span class="line"></span><br><span class="line">  extent_protocol::attr attr;</span><br><span class="line">  attr.atime = attr.mtime = attr.ctime = time(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(m_dataMap.find(id) != m_dataMap.end())</span><br><span class="line">  &#123;</span><br><span class="line">    attr.atime = m_dataMap[id].attr.atime;</span><br><span class="line">  &#125;</span><br><span class="line">  attr.size = buf.size();</span><br><span class="line">  m_dataMap[id].data = buf;</span><br><span class="line">  m_dataMap[id].attr = attr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> extent_protocol::OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> extent_server::get(extent_protocol::<span class="keyword">extentid_t</span> id, <span class="built_in">std</span>::<span class="built_in">string</span> &amp;buf)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// You fill this in for Lab 2.</span></span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lg(m_mutex);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(m_dataMap.find(id) != m_dataMap.end())</span><br><span class="line">  &#123;</span><br><span class="line">    m_dataMap[id].attr.atime = time(<span class="literal">NULL</span>);</span><br><span class="line">    buf = m_dataMap[id].data;</span><br><span class="line">    <span class="keyword">return</span> extent_protocol::OK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> extent_protocol::NOENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> extent_server::getattr(extent_protocol::<span class="keyword">extentid_t</span> id, extent_protocol::attr &amp;a)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// You fill this in for Lab 2.</span></span><br><span class="line">  <span class="comment">// You replace this with a real implementation. We send a phony response</span></span><br><span class="line">  <span class="comment">// for now because it's difficult to get FUSE to do anything (including</span></span><br><span class="line">  <span class="comment">// unmount) if getattr fails.</span></span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lg(m_mutex);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(m_dataMap.find(id) != m_dataMap.end())</span><br><span class="line">  &#123;</span><br><span class="line">    a = m_dataMap[id].attr;</span><br><span class="line">    <span class="keyword">return</span> extent_protocol::OK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> extent_protocol::NOENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> extent_server::remove(extent_protocol::<span class="keyword">extentid_t</span> id, <span class="keyword">int</span> &amp;)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// You fill this in for Lab 2.</span></span><br><span class="line">  <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; lg(m_mutex);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> it = m_dataMap.find(id); </span><br><span class="line">  <span class="keyword">if</span>(it != m_dataMap.end())</span><br><span class="line">  &#123;</span><br><span class="line">    m_dataMap.erase(it);</span><br><span class="line">    <span class="keyword">return</span> extent_protocol::OK;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> extent_protocol::NOENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一些需要线程安全的 map 操作， 用 lock_guard 锁住全局</span></span><br></pre></td></tr></table></figure><h2 id="yfs-client"><a href="#yfs-client" class="headerlink" title="yfs_client"></a>yfs_client</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> yfs_client_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yfs_client_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">//#include "yfs_protocol.h"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"extent_client.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个文件和目录都有一个唯一的 inum</span></span><br><span class="line"><span class="comment">// FUSE 假定根目录的 inum 是 0x00000001。因此，需要确保在 yfs_client 启动时，它已准备好导出存储在该inum 下的空目录。</span></span><br><span class="line"><span class="comment">// 在创建一个新的文件或者目录的时候，必须要给它配置一个唯一的 inum， 这个 inum 可以随机生成（但是如果文件量变大，会产生 collision</span></span><br><span class="line"><span class="comment">// YFS needs to be able to tell whether a particular inum refers to a file or a directory. Do this by allocating IDs with the 31st bit of one for new files, and IDs with the 31st bit of zero for new directories. The method yfs_client::isfile assumes this property holds for inum.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">yfs_client</span> &#123;</span></span><br><span class="line">  extent_client *ec;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> inum;</span><br><span class="line">  <span class="keyword">enum</span> xxstatus &#123; OK, RPCERR, NOENT, IOERR, EXIST &#125;;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fileinfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> atime;  <span class="comment">// 访问时间</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> mtime;  <span class="comment">// 修改时间</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ctime;  <span class="comment">// 变化时间</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dirinfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> atime;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> mtime;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ctime;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    yfs_client::inum inum;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">filename</span><span class="params">(inum)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> inum <span class="title">n2i</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span>)</span></span>;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  yfs_client(<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="built_in">std</span>::<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isfile</span><span class="params">(inum)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isdir</span><span class="params">(inum)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getfile</span><span class="params">(inum, fileinfo &amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getdir</span><span class="params">(inum, dirinfo &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">  yfs_client::<span class="function">inum <span class="title">random_inum</span><span class="params">(<span class="keyword">bool</span> isfile)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(inum, <span class="keyword">const</span> <span class="keyword">char</span>*, inum&amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">lookup</span><span class="params">(inum, <span class="keyword">const</span> <span class="keyword">char</span>*, inum&amp;, <span class="keyword">bool</span>*)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">readdir</span><span class="params">(inum, <span class="built_in">std</span>::<span class="built_in">list</span>&lt;dirent&gt;&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">setattr</span><span class="params">(inum, struct stat*)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(inum, <span class="keyword">off_t</span>, <span class="keyword">size_t</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&amp;)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(inum, <span class="keyword">off_t</span>, <span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">char</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">yfs_client::yfs_client(<span class="built_in">std</span>::<span class="built_in">string</span> extent_dst, <span class="built_in">std</span>::<span class="built_in">string</span> lock_dst)</span><br><span class="line">&#123;</span><br><span class="line">  ec = <span class="keyword">new</span> extent_client(extent_dst);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//  string 转成 64-bit 的 inum </span></span><br><span class="line">yfs_client::inum</span><br><span class="line">yfs_client::n2i(<span class="built_in">std</span>::<span class="built_in">string</span> n)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="function"><span class="built_in">istringstream</span> <span class="title">ist</span><span class="params">(n)</span></span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> finum;</span><br><span class="line">  ist &gt;&gt; finum;</span><br><span class="line">  <span class="keyword">return</span> finum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 64-bit inum 转成 string 类型的文件名</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span></span><br><span class="line">yfs_client::filename(inum inum)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">ostringstream</span> ost;</span><br><span class="line">  ost &lt;&lt; inum;</span><br><span class="line">  <span class="keyword">return</span> ost.str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// YFS needs to be able to tell whether a particular inum refers to a file or a directory. Do this by allocating IDs with the 31st bit of one for new files, and IDs with the 31st bit of zero for new directories.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 31st bits 来判断是否为文件</span></span><br><span class="line"><span class="keyword">bool</span></span><br><span class="line">yfs_client::isfile(inum inum)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(inum &amp; <span class="number">0x80000000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span></span><br><span class="line">yfs_client::isdir(inum inum)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ! isfile(inum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::getfile(inum inum, fileinfo &amp;fin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> r = OK;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"getfile %016llx\n"</span>, inum);</span><br><span class="line">  extent_protocol::attr a;</span><br><span class="line">  <span class="keyword">if</span> (ec-&gt;getattr(inum, a) != extent_protocol::OK) &#123;</span><br><span class="line">    r = IOERR;</span><br><span class="line">    <span class="keyword">goto</span> release;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fin.atime = a.atime;</span><br><span class="line">  fin.mtime = a.mtime;</span><br><span class="line">  fin.ctime = a.ctime;</span><br><span class="line">  fin.size = a.size;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"getfile %016llx -&gt; sz %llu\n"</span>, inum, fin.size);</span><br><span class="line"></span><br><span class="line">  release:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::getdir(inum inum, dirinfo &amp;din)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> r = OK;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"getdir %016llx\n"</span>, inum);</span><br><span class="line">  extent_protocol::attr a;</span><br><span class="line">  <span class="keyword">if</span> (ec-&gt;getattr(inum, a) != extent_protocol::OK) &#123;</span><br><span class="line">    r = IOERR;</span><br><span class="line">    <span class="keyword">goto</span> release;</span><br><span class="line">  &#125;</span><br><span class="line">  din.atime = a.atime;</span><br><span class="line">  din.mtime = a.mtime;</span><br><span class="line">  din.ctime = a.ctime;</span><br><span class="line"></span><br><span class="line"> release:</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成 inum</span></span><br><span class="line">yfs_client::inum</span><br><span class="line">yfs_client::random_inum(<span class="keyword">bool</span> isfile)</span><br><span class="line">&#123;</span><br><span class="line">  inum ret = (<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)((rand() &amp; <span class="number">0x7fffffff</span>) | (isfile &lt;&lt; <span class="number">31</span>));</span><br><span class="line">  ret = <span class="number">0xffffffff</span> &amp; ret;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::create(inum parent, <span class="keyword">const</span> <span class="keyword">char</span>* name, inum&amp; inum)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> file_name;</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;get(parent, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file_name = <span class="string">"/"</span> + <span class="built_in">std</span>::<span class="built_in">string</span>(name) + <span class="string">"/"</span>;</span><br><span class="line">  <span class="comment">// 文件已经存在</span></span><br><span class="line">  <span class="keyword">if</span> (data.find(file_name) != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> EXIST;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  inum = random_inum(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;put(inum, <span class="built_in">std</span>::<span class="built_in">string</span>()) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  data.append(file_name + filename(inum) + <span class="string">"/"</span>);</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;put(parent, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::lookup(inum parent, <span class="keyword">const</span> <span class="keyword">char</span>* name, inum&amp; inum, <span class="keyword">bool</span>* found)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">size_t</span> pos, end;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data, file_name, ino;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;get(parent, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  file_name = <span class="string">"/"</span> + <span class="built_in">std</span>::<span class="built_in">string</span>(name) + <span class="string">"/"</span>;</span><br><span class="line">  pos = data.find(file_name);</span><br><span class="line">  <span class="keyword">if</span>(pos != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">  &#123;</span><br><span class="line">    *found = <span class="literal">true</span>;</span><br><span class="line">    pos += file_name.size();</span><br><span class="line">    end = data.find_first_of(<span class="string">"/"</span>, pos);</span><br><span class="line">    <span class="keyword">if</span>(end != <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">    &#123;</span><br><span class="line">      ino = data.substr(pos, end - pos);</span><br><span class="line">      inum = n2i(ino.c_str()); <span class="comment">// 获得 inum</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> IOERR;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::readdir(inum inum, <span class="built_in">std</span>::<span class="built_in">list</span>&lt;dirent&gt; &amp; dirents)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data, inum_str;</span><br><span class="line">  <span class="keyword">size_t</span> pos, name_end, name_len, inum_end, inum_len;</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;get(inum, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(pos != data.size())</span><br><span class="line">  &#123;</span><br><span class="line">    dirent d;</span><br><span class="line">    pos = data.find(<span class="string">"/"</span>, pos);</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="built_in">std</span>::<span class="built_in">string</span>::npos)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    name_end = data.find_first_of(<span class="string">"/"</span>, pos+<span class="number">1</span>);</span><br><span class="line">    name_len = name_end - pos - <span class="number">1</span>;</span><br><span class="line">    d.name = data.substr(pos+<span class="number">1</span>, name_len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    inum_end = data.find_first_of(<span class="string">"/"</span>, name_end + <span class="number">1</span>);</span><br><span class="line">    inum_len = inum_end - inum_end - <span class="number">1</span>;</span><br><span class="line">    inum_str = data.substr(name_end+<span class="number">1</span>, inum_len);</span><br><span class="line"></span><br><span class="line">    d.inum = n2i(inum_str.c_str());</span><br><span class="line">    dirents.push_back(d);</span><br><span class="line">    pos = inum_end + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::setattr(inum inum, struct stat* attr)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">size_t</span> size = attr-&gt;st_size;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> buf;</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;get(inum, buf) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buf.resize(size, <span class="string">'\0'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;put(inum, buf) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::read(inum inum, <span class="keyword">off_t</span> off, <span class="keyword">size_t</span> size, <span class="built_in">std</span>::<span class="built_in">string</span> &amp;buf)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data;</span><br><span class="line">  <span class="keyword">size_t</span> read_size;</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;get(inum, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(off &gt;= data.size())  <span class="comment">// 起始 offset 超过范围 直接返回空</span></span><br><span class="line">  &#123;</span><br><span class="line">    buf = <span class="built_in">std</span>::<span class="built_in">string</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  read_size = size;</span><br><span class="line">  <span class="keyword">if</span>(off + size &gt; data.size())</span><br><span class="line">  &#123;</span><br><span class="line">    read_size = data.size() - off;</span><br><span class="line">  &#125;  <span class="comment">// 超过范围 截断</span></span><br><span class="line">  buf = data.substr(off, read_size);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">yfs_client::write(inum inum, <span class="keyword">off_t</span> off, <span class="keyword">size_t</span> size, <span class="keyword">const</span> <span class="keyword">char</span> *buf)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> data;</span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;get(inum, data) != extent_protocol::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(size + off &gt; data.size())  <span class="comment">// 扩容</span></span><br><span class="line">  &#123;</span><br><span class="line">    data.resize(size + off, <span class="string">'\0'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    data[off+i] = buf[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(ec-&gt;put(inum, data) != extent_protocol::OK) &#123;</span><br><span class="line">    <span class="keyword">return</span> IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> OK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fuse"><a href="#fuse" class="headerlink" title="fuse"></a>fuse</h2><p>fuse.cc</p><p>receive request from fuse and call methods of yfs_client。</p><p>When a program (such as <code>ls</code> or a test script) manipulates a file or directory (such as <code>yfs1</code>) served by your <code>yfs_client</code>, the FUSE code in the kernel sends corresponding operations to <code>yfs_client</code> via FUSE. The code we provide you in <code>fuse.cc</code>responds to each such operation by calling one of a number of procedures, for create, read, write, etc. operations. You should modify the relevant routines in <code>fuse.cc</code> to call methods in <code>yfs_client.cc</code>. <code>fuse.cc</code> should just contain glue code, and the core of your file system logic should be in <code>yfs_client.cc</code>. For example, to handle file creation, you should modify <code>fuseserver_createhelper</code> to call <code>yfs-&gt;create(...)</code>, and you should add a new <code>create(...)</code> method to <code>yfs_client.cc</code>. Look at <code>getattr()</code> in <code>fuse.cc</code> for an example of how a fuse operation handler works, how it calls methods in <code>yfs_client</code>, and how it sends results and errors back to the kernel. YFS uses FUSE’s “lowlevel” API.</p><p>我把 fuse.cc 当作 yfs_client 的 wrapper。</p><h4 id="Attr"><a href="#Attr" class="headerlink" title="Attr"></a>Attr</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">yfs_client::status</span><br><span class="line">getattr(yfs_client::inum inum, struct stat &amp;st)</span><br><span class="line">&#123;</span><br><span class="line">  yfs_client::status ret;</span><br><span class="line"></span><br><span class="line">  bzero(&amp;st, <span class="keyword">sizeof</span>(st));</span><br><span class="line"></span><br><span class="line">  st.st_ino = inum;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"getattr %016llx %d\n"</span>, inum, yfs-&gt;isfile(inum));</span><br><span class="line">  <span class="keyword">if</span>(yfs-&gt;isfile(inum))&#123;  <span class="comment">// file </span></span><br><span class="line">     yfs_client::fileinfo info;</span><br><span class="line">     ret = yfs-&gt;getfile(inum, info);</span><br><span class="line">     <span class="keyword">if</span>(ret != yfs_client::OK)</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">     st.st_mode = S_IFREG | <span class="number">0666</span>;  <span class="comment">// regular 普通文件 可读可写不可执行</span></span><br><span class="line">     st.st_nlink = <span class="number">1</span>;  <span class="comment">// 链接计数</span></span><br><span class="line">     st.st_atime = info.atime;</span><br><span class="line">     st.st_mtime = info.mtime;</span><br><span class="line">     st.st_ctime = info.ctime;</span><br><span class="line">     st.st_size = info.size;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"   getattr -&gt; %llu\n"</span>, info.size);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123; <span class="comment">// dir</span></span><br><span class="line">     yfs_client::dirinfo info;</span><br><span class="line">     ret = yfs-&gt;getdir(inum, info);</span><br><span class="line">     <span class="keyword">if</span>(ret != yfs_client::OK)</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">     st.st_mode = S_IFDIR | <span class="number">0777</span>;</span><br><span class="line">     st.st_nlink = <span class="number">2</span>;</span><br><span class="line">     st.st_atime = info.atime;</span><br><span class="line">     st.st_mtime = info.mtime;</span><br><span class="line">     st.st_ctime = info.ctime;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"   getattr -&gt; %lu %lu %lu\n"</span>, info.atime, info.mtime, info.ctime);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> yfs_client::OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>struct stat</code></li><li><code>{</code></li><li><code>mode_t st_mode;/* file type &amp; mode (permissions) */</code></li><li><code>ino_t    st_ino;/* i-node number (serial number) */</code></li><li><code>dev_t    st_dev;/* device number (file system) */</code></li><li><code>dev_t    st_rdev;/* device number for special files */</code></li><li><code>nlink_t    st_nlink;/* number of links */</code></li><li><code>uid_t    st_uid;/* user ID of owner */</code></li><li><code>gid_t    st_gid;/* group ID of owner */</code></li><li><code>off_t    st_size;/* size in bytes, for regular files */</code></li><li><code>struct timespec    st_atim;/* time of last access */</code></li><li><code>struct timespec    st_mtim;/* time of last modification */</code></li><li><code>struct timespec    st_ctim;/* time of last file status change */</code></li><li><code>blksize_t    st_blksize;/* best I/O block size */</code></li><li><code>blkcnt_t    st_blocks;/* number of disk blocks allocated */</code></li><li><code>};</code></li></ol></blockquote><p>一个操作对应着一个 handler，下面是 getattr 的 handler。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The @ino argument indicates the file or directory FUSE wants</span></span><br><span class="line"><span class="comment">// you to operate on. It's a 32-bit FUSE identifier; just assign</span></span><br><span class="line"><span class="comment">// it to a yfs_client::inum to get a 64-bit YFS inum.</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_getattr(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> ino,</span><br><span class="line">          struct fuse_file_info *fi)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line">    yfs_client::inum inum = ino; <span class="comment">// req-&gt;in.h.nodeid;</span></span><br><span class="line">    yfs_client::status ret;</span><br><span class="line"></span><br><span class="line">    ret = getattr(inum, st);</span><br><span class="line">    <span class="keyword">if</span>(ret != yfs_client::OK)&#123;</span><br><span class="line">      fuse_reply_err(req, ENOENT);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fuse_reply_attr(req, &amp;st, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果发生错误，需调用 fuse_reply_err(req, errno). 成功的话就调用 fuse_reply_xx(req, …)</p><p>相应地，可以 setAttr，具体实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_setattr(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> ino, struct stat *attr, <span class="keyword">int</span> to_set, struct fuse_file_info *fi)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"fuseserver_setattr 0x%x\n"</span>, to_set);</span><br><span class="line">  <span class="keyword">if</span> (FUSE_SET_ATTR_SIZE &amp; to_set) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"   fuseserver_setattr set size to %zu\n"</span>, attr-&gt;st_size);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">    <span class="comment">// fill st using getattr before fuse_reply_attr</span></span><br><span class="line">    yfs_client::inum inum = ino;</span><br><span class="line">    yfs_client::status ret;</span><br><span class="line"></span><br><span class="line">    ret = yfs-&gt;setattr(inum, attr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ret != yfs_client::OK)</span><br><span class="line">    &#123;</span><br><span class="line">      fuse_reply_err(req, ENOENT);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = getattr(inum, st);</span><br><span class="line">    <span class="keyword">if</span>(ret != yfs_client::OK)&#123;</span><br><span class="line">      fuse_reply_err(req, ENOENT);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fuse_reply_attr(req, &amp;st, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    fuse_reply_err(req, ENOSYS);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fuse_reply_err(req, ENOSYS);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_read(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> ino, <span class="keyword">size_t</span> size,</span><br><span class="line">      <span class="keyword">off_t</span> off, struct fuse_file_info *fi)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">string</span> buf;</span><br><span class="line">  yfs_client::inum inum = ino;</span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  ret = yfs-&gt;read(inum, off, size, buf);</span><br><span class="line">  <span class="keyword">if</span>(ret != yfs_client::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    fuse_reply_err(req, ENOENT);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fuse_reply_buf(req, buf.data(), buf.size());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  fuse_reply_err(req, ENOSYS);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_write(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> ino,</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> size, <span class="keyword">off_t</span> off,</span><br><span class="line">  struct fuse_file_info *fi)</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line">  yfs_client::inum inum = ino;</span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  ret = yfs-&gt;write(inum, off, size, buf);</span><br><span class="line">  <span class="keyword">if</span>(ret != yfs_client::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    fuse_reply_err(req, ENOENT);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fuse_reply_write(req, size);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  fuse_reply_err(req, ENOSYS);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="create-file-dir"><a href="#create-file-dir" class="headerlink" title="create file / dir"></a>create file / dir</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 parent 目录下创建名为 name 的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// - @mode specifies the create mode of the file. Ignore it - you do not</span></span><br><span class="line"><span class="comment">//   have to implement file mode.</span></span><br><span class="line"><span class="comment">// - If a file named @name already exists in @parent, return EXIST.</span></span><br><span class="line"><span class="comment">// - Pick an ino (with type of yfs_client::inum) for file @name. </span></span><br><span class="line"><span class="comment">//   Make sure ino indicates a file, not a directory!</span></span><br><span class="line"><span class="comment">// - Create an empty extent for ino.</span></span><br><span class="line"><span class="comment">// - Add a &lt;name, ino&gt; entry into @parent.</span></span><br><span class="line"><span class="comment">// - On success, store the inum of newly created file into @e-&gt;ino, </span></span><br><span class="line"><span class="comment">//   and the new file's attribute into @e-&gt;attr. Get the file's</span></span><br><span class="line"><span class="comment">//   attributes with getattr().</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @return yfs_client::OK on success, and EXIST if @name already exists.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">yfs_client::status</span><br><span class="line">fuseserver_createhelper(<span class="keyword">fuse_ino_t</span> parent, <span class="keyword">const</span> <span class="keyword">char</span> *name,</span><br><span class="line">     <span class="keyword">mode_t</span> mode, struct fuse_entry_param *e)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// In yfs, timeouts are always set to 0.0, and generations are always set to 0</span></span><br><span class="line">  e-&gt;attr_timeout = <span class="number">0.0</span>;</span><br><span class="line">  e-&gt;entry_timeout = <span class="number">0.0</span>;</span><br><span class="line">  e-&gt;generation = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  yfs_client::inum inum = <span class="number">0</span>;</span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  ret = yfs-&gt;create(parent, name, inum);</span><br><span class="line">  <span class="keyword">if</span>(ret == yfs_client::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    e-&gt;ino = inum;</span><br><span class="line">    getattr(inum, e-&gt;attr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// wrap 了一下上面的 helper</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_create(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> parent, <span class="keyword">const</span> <span class="keyword">char</span> *name,</span><br><span class="line">   <span class="keyword">mode_t</span> mode, struct fuse_file_info *fi)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fuse_entry_param</span> <span class="title">e</span>;</span></span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  <span class="keyword">if</span>( (ret = fuseserver_createhelper( parent, name, mode, &amp;e )) == yfs_client::OK ) &#123;</span><br><span class="line">    fuse_reply_create(req, &amp;e, fi);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ret == yfs_client::EXIST) &#123;</span><br><span class="line">fuse_reply_err(req, EEXIST);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fuse_reply_err(req, ENOENT);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mknod 创建块设备或者字符设备文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fuseserver_mknod</span><span class="params">( <span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> parent, </span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">mode_t</span> mode, <span class="keyword">dev_t</span> rdev )</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fuse_entry_param</span> <span class="title">e</span>;</span></span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  <span class="keyword">if</span>( (ret = fuseserver_createhelper( parent, name, mode, &amp;e )) == yfs_client::OK ) &#123;</span><br><span class="line">    fuse_reply_entry(req, &amp;e);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (ret == yfs_client::EXIST) &#123;</span><br><span class="line">fuse_reply_err(req, EEXIST);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">fuse_reply_err(req, ENOENT);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lookup"><a href="#lookup" class="headerlink" title="lookup"></a>lookup</h4><p>在 parent 文件夹下寻找文件或者文件夹，如果能够找到名为 name 的文件或文件夹，更改 e.attr 和 e.ino.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_lookup(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> parent, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fuse_entry_param</span> <span class="title">e</span>;</span></span><br><span class="line">  <span class="comment">// In yfs, timeouts are always set to 0.0, and generations are always set to 0</span></span><br><span class="line">  e.attr_timeout = <span class="number">0.0</span>;</span><br><span class="line">  e.entry_timeout = <span class="number">0.0</span>;</span><br><span class="line">  e.generation = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  yfs_client::inum inum;</span><br><span class="line">  ret = yfs-&gt;lookup(parent, name, inum, &amp;found);</span><br><span class="line">  <span class="keyword">if</span>(ret == yfs_client::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    e.ino = inum;</span><br><span class="line">    getattr(e.ino, e.attr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (found)</span><br><span class="line">    fuse_reply_entry(req, &amp;e);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    fuse_reply_err(req, ENOENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="readdir"><a href="#readdir" class="headerlink" title="readdir"></a>readdir</h4><p>获取一个目录下所有的目录项</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Send the reply using reply_buf_limited.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Call dirbuf_add(&amp;b, name, inum) for each entry in the directory.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">fuseserver_readdir(<span class="keyword">fuse_req_t</span> req, <span class="keyword">fuse_ino_t</span> ino, <span class="keyword">size_t</span> size,</span><br><span class="line">          <span class="keyword">off_t</span> off, struct fuse_file_info *fi)</span><br><span class="line">&#123;</span><br><span class="line">  yfs_client::inum inum = ino; <span class="comment">// req-&gt;in.h.nodeid;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dirbuf</span> <span class="title">b</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"fuseserver_readdir\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(!yfs-&gt;isdir(inum))&#123;</span><br><span class="line">    fuse_reply_err(req, ENOTDIR);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;b, <span class="number">0</span>, <span class="keyword">sizeof</span>(b));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// You fill this in for Lab 2</span></span><br><span class="line">  yfs_client::status ret;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">list</span>&lt;yfs_client::dirent&gt; dirents;</span><br><span class="line">  ret = yfs-&gt;readdir(inum, dirents);</span><br><span class="line">  <span class="keyword">if</span>(ret != yfs_client::OK)</span><br><span class="line">  &#123;</span><br><span class="line">    fuse_reply_err(req, ENOENT);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> it = dirents.begin(); it != dirents.end(); ++it)</span><br><span class="line">  &#123;</span><br><span class="line">    dirbuf_add(&amp;b, it-&gt;name.c_str(), it-&gt;inum);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  reply_buf_limited(req, b.p, b.size, off, size);</span><br><span class="line">  <span class="built_in">free</span>(b.p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 dirbuf 的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirbuf</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *p;</span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dirbuf_add</span><span class="params">(struct dirbuf *b, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">fuse_ino_t</span> ino)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stbuf</span>;</span></span><br><span class="line">    <span class="keyword">size_t</span> oldsize = b-&gt;size;</span><br><span class="line">    b-&gt;size += fuse_dirent_size(<span class="built_in">strlen</span>(name));</span><br><span class="line">    b-&gt;p = (<span class="keyword">char</span> *) <span class="built_in">realloc</span>(b-&gt;p, b-&gt;size);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;stbuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(stbuf));</span><br><span class="line">    stbuf.st_ino = ino;</span><br><span class="line">    fuse_add_dirent(b-&gt;p + oldsize, name, &amp;stbuf, b-&gt;size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 reply_buf_limited 定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reply_buf_limited</span><span class="params">(<span class="keyword">fuse_req_t</span> req, <span class="keyword">const</span> <span class="keyword">char</span> *buf, <span class="keyword">size_t</span> bufsize,</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">off_t</span> off, <span class="keyword">size_t</span> maxsize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">size_t</span>)off &lt; bufsize)</span><br><span class="line">    <span class="keyword">return</span> fuse_reply_buf(req, buf + off, min(bufsize - off, maxsize));</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> fuse_reply_buf(req, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/liu-jianhao/yfsCpp11" target="_blank" rel="noopener">yfsCpp11</a></li><li><a href="https://liu-jianhao.github.io/2018/12/yfs%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">yfs实现第二步实现基本文件服务</a></li><li><a href="https://www.cnblogs.com/fireway/p/5990572.html" target="_blank" rel="noopener">硬链接和软链接</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;p&gt;extent_server 用于存储文件系统所有的数据，有多个客户端与 extent_server 进行通信。&lt;/p
      
    
    </summary>
    
      <category term="yfs" scheme="http://ywqzzy.github.io/categories/yfs/"/>
    
    
      <category term="c++ 分布式 yfs" scheme="http://ywqzzy.github.io/tags/c-%E5%88%86%E5%B8%83%E5%BC%8F-yfs/"/>
    
  </entry>
  
  <entry>
    <title>yfs-源码剖析（1）--锁服务</title>
    <link href="http://ywqzzy.github.io/2020/10/27/yfs-%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%EF%BC%881%EF%BC%89-%E9%94%81%E6%9C%8D%E5%8A%A1/"/>
    <id>http://ywqzzy.github.io/2020/10/27/yfs-源码剖析（1）-锁服务/</id>
    <published>2020-10-27T12:31:14.000Z</published>
    <updated>2020-10-27T12:58:40.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>yfs 需要一个锁服务来协调文件系统结构的更新。</p><p>其中包括两个模块，分别是锁客户端和锁服务器。</p><p>他们之间的 RPC 交互流程如下：</p><ol><li>客户端发送请求从锁服务器请求锁。</li><li>锁服务器在一个时间点只能向一个客户端发送锁。</li><li>客户端不需要锁的时候，会向服务器发送释放请求。</li><li>释放锁后，服务端会把锁给其他正在请求的客户端。</li></ol><h2 id="lock-protocol-h"><a href="#lock-protocol-h" class="headerlink" title="lock_protocol.h"></a>lock_protocol.h</h2><h4 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lock</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">enum</span> lock_status &#123;FREE, LOCKED&#125;;</span><br><span class="line">  <span class="comment">// 用这个来标识每个锁</span></span><br><span class="line">  lock_protocol::<span class="keyword">lockid_t</span> m_lid;</span><br><span class="line">  <span class="comment">// FREE or LOCKED</span></span><br><span class="line">  <span class="keyword">int</span> m_state;</span><br><span class="line">  <span class="comment">// 条件变量</span></span><br><span class="line">  <span class="built_in">std</span>::condition_variable m_cv;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  lock(lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> state);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lock::lock(lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> state) : m_lid(lid), m_state(state)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="lock-protocol"><a href="#lock-protocol" class="headerlink" title="lock_protocol"></a>lock_protocol</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lock_protocol</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">enum</span> xxstatus &#123; OK, RETRY, RPCERR, NOENT, IOERR &#125;;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">int</span> status;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">lockid_t</span>;</span><br><span class="line">  <span class="keyword">enum</span> rpc_numbers &#123;</span><br><span class="line">    acquire = <span class="number">0x7001</span>,</span><br><span class="line">    release,</span><br><span class="line">    stat</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="lock-client"><a href="#lock-client" class="headerlink" title="lock_client"></a>lock_client</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lock_client</span> &#123;</span></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  rpcc *cl;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  lock_client(<span class="built_in">std</span>::<span class="built_in">string</span> d);</span><br><span class="line">  <span class="keyword">virtual</span> ~lock_client() &#123;&#125;;</span><br><span class="line">  <span class="keyword">virtual</span> lock_protocol::<span class="function">status <span class="title">acquire</span><span class="params">(lock_protocol::<span class="keyword">lockid_t</span>)</span></span>;  <span class="comment">// 获得锁的接口</span></span><br><span class="line">  <span class="keyword">virtual</span> lock_protocol::<span class="function">status <span class="title">release</span><span class="params">(lock_protocol::<span class="keyword">lockid_t</span>)</span></span>;  <span class="comment">// 释放锁的接口</span></span><br><span class="line">  <span class="keyword">virtual</span> lock_protocol::<span class="function">status <span class="title">stat</span><span class="params">(lock_protocol::<span class="keyword">lockid_t</span>)</span></span>;     <span class="comment">// 获得 status 的接口</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 lock_client 类发送 RPC 至 lock_server, 以获取来自 lock_server 的响应。</p><p>lock_client 的实现如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">lock_client::lock_client(<span class="built_in">std</span>::<span class="built_in">string</span> dst)  <span class="comment">// rpc 绑定至 dst </span></span><br><span class="line">&#123;</span><br><span class="line">  sockaddr_in dstsock;</span><br><span class="line">  make_sockaddr(dst.c_str(), &amp;dstsock); <span class="comment">// rpc.h 里的辅助函数</span></span><br><span class="line">  cl = <span class="keyword">new</span> rpcc(dstsock);</span><br><span class="line">  <span class="keyword">if</span> (cl-&gt;bind() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"lock_client: call bind\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">lock_client::stat(lock_protocol::<span class="keyword">lockid_t</span> lid)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> ret = cl-&gt;call(lock_protocol::stat, cl-&gt;id(), lid, r);</span><br><span class="line">  VERIFY (ret == lock_protocol::OK);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock_protocol::status</span><br><span class="line">lock_client::acquire(lock_protocol::<span class="keyword">lockid_t</span> lid)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> ret = cl-&gt;call(lock_protocol::acquire, cl-&gt;id(), lid, r);</span><br><span class="line">  VERIFY (ret == lock_protocol::OK);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock_protocol::status</span><br><span class="line">lock_client::release(lock_protocol::<span class="keyword">lockid_t</span> lid)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> r;</span><br><span class="line">  <span class="keyword">int</span> ret = cl-&gt;call(lock_protocol::release, cl-&gt;id(), lid, r);</span><br><span class="line">  VERIFY (ret == lock_protocol::OK);</span><br><span class="line">  <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client 端都是些套路代码，主要实现都来自于 server 端的函数。</p><h2 id="lock-server"><a href="#lock-server" class="headerlink" title="lock_server"></a>lock_server</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> lock_server_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lock_server_h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lock_protocol.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lock_client.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"rpc.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lock_server</span> &#123;</span></span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="keyword">int</span> nacquire;</span><br><span class="line">  <span class="built_in">std</span>::mutex m_mutex;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">map</span>&lt;lock_protocol::<span class="keyword">lockid_t</span>, lock*&gt; m_lockMap; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  lock_server();</span><br><span class="line">  ~lock_server() &#123;&#125;;</span><br><span class="line">  lock_protocol::<span class="function">status <span class="title">stat</span><span class="params">(<span class="keyword">int</span> clt, lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">  lock_protocol::<span class="function">status <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> clt, lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">  lock_protocol::<span class="function">status <span class="title">release</span><span class="params">(<span class="keyword">int</span> clt, lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> &amp;)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"lock_server.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面 lock 的构造函数</span></span><br><span class="line">lock::lock(lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> state) : m_lid(lid), m_state(state)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lock_server 的构造函数</span></span><br><span class="line">lock_server::lock_server():</span><br><span class="line">  nacquire (<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock_protocol::status</span><br><span class="line">lock_server::stat(<span class="keyword">int</span> clt, lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> &amp;r)</span><br><span class="line">&#123;</span><br><span class="line">  lock_protocol::status ret = lock_protocol::OK;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"stat request from clt %d\n"</span>, clt);</span><br><span class="line">  r = nacquire;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock_protocol::status</span><br><span class="line">lock_server::acquire(<span class="keyword">int</span> clt, lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> &amp;r)</span><br><span class="line">&#123;</span><br><span class="line">  lock_protocol::status ret = lock_protocol::OK;  <span class="comment">// 初始化返回值</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lck(m_mutex);  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> iter = m_lockMap.find(lid);</span><br><span class="line">  <span class="keyword">if</span> (iter != m_lockMap.end())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span>(iter-&gt;second-&gt;m_state != lock::FREE)</span><br><span class="line">    &#123;</span><br><span class="line">      iter-&gt;second-&gt;m_cv.wait(lck); <span class="comment">// 在条件变量上 wait</span></span><br><span class="line">    &#125;</span><br><span class="line">    iter-&gt;second-&gt;m_state = lock::LOCKED; <span class="comment">// 获得 lock</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 没找到就新建一个锁</span></span><br><span class="line">    <span class="keyword">auto</span> p_mutex = <span class="keyword">new</span> lock(lid, lock::LOCKED);</span><br><span class="line">    m_lockMap.insert(<span class="built_in">std</span>::pair&lt;lock_protocol::<span class="keyword">lockid_t</span>, lock*&gt;(lid, p_mutex));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock_protocol::status</span><br><span class="line">lock_server::release(<span class="keyword">int</span> clt, lock_protocol::<span class="keyword">lockid_t</span> lid, <span class="keyword">int</span> &amp;r)</span><br><span class="line">&#123;</span><br><span class="line">  lock_protocol::status ret = lock_protocol::OK;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; lck(m_mutex);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">auto</span> iter = m_lockMap.find(lid);</span><br><span class="line">  <span class="keyword">if</span> (iter != m_lockMap.end())</span><br><span class="line">  &#123;</span><br><span class="line">    iter-&gt;second-&gt;m_state = lock::FREE;</span><br><span class="line">    iter-&gt;second-&gt;m_cv.notify_all();  <span class="comment">// 条件变量 notify_all  这样 wai t的会被唤醒</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    ret = lock_protocol::IOERR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  m_mutex.unlock();</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://liu-jianhao.github.io/2018/11/yfs%E5%AE%9E%E7%8E%B0%E7%AC%AC%E4%B8%80%E6%AD%A5%E9%94%81%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">yfs实现第一步——锁服务</a></li><li><a href="https://github.com/liu-jianhao/yfsCpp11/" target="_blank" rel="noopener">yfsCpp11</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;yfs 需要一个锁服务来协调文件系统结构的更新。&lt;/p&gt;
&lt;p&gt;其中包括两个模块，分别是锁客户端和锁服务器。&lt;/p&gt;
&lt;p&gt;他们之间的 RP
      
    
    </summary>
    
      <category term="yfs" scheme="http://ywqzzy.github.io/categories/yfs/"/>
    
    
      <category term="c++ 分布式 yfs" scheme="http://ywqzzy.github.io/tags/c-%E5%88%86%E5%B8%83%E5%BC%8F-yfs/"/>
    
  </entry>
  
  <entry>
    <title>muduo GzipFile</title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-GzipFile/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-GzipFile/</id>
    <published>2020-10-27T09:30:16.000Z</published>
    <updated>2020-10-27T09:33:39.320Z</updated>
    
    <content type="html"><![CDATA[<p>对 zlib 进行了简单封装，主要欣赏代码风格和规范。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/StringPiece.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/noncopyable.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;zlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GzipFile</span> :</span> noncopyable</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  GzipFile(GzipFile&amp;&amp; rhs) <span class="keyword">noexcept</span>  <span class="comment">// move</span></span><br><span class="line">    : file_(rhs.file_)</span><br><span class="line">  &#123;</span><br><span class="line">    rhs.file_ = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ~GzipFile()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_)</span><br><span class="line">    &#123;</span><br><span class="line">      ::gzclose(file_);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  GzipFile&amp; <span class="keyword">operator</span>=(GzipFile&amp;&amp; rhs) <span class="keyword">noexcept</span></span><br><span class="line">  &#123;</span><br><span class="line">    swap(rhs);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> file_ != <span class="literal">NULL</span>; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(GzipFile&amp; rhs)</span> </span>&#123; <span class="built_in">std</span>::swap(file_, rhs.file_); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZLIB_VERNUM &gt;= 0x1240</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">setBuffer</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123; <span class="keyword">return</span> ::gzbuffer(file_, size) == <span class="number">0</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// return the number of uncompressed bytes actually read, 0 for eof, -1 for error</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">void</span>* buf, <span class="keyword">int</span> len)</span> </span>&#123; <span class="keyword">return</span> ::gzread(file_, buf, len); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return the number of uncompressed bytes actually written</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">write</span><span class="params">(StringPiece buf)</span> </span>&#123; <span class="keyword">return</span> ::gzwrite(file_, buf.data(), buf.size()); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// number of uncompressed bytes</span></span><br><span class="line">  <span class="keyword">off_t</span> tell() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ::gztell(file_); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZLIB_VERNUM &gt;= 0x1240</span></span><br><span class="line">  <span class="comment">// number of compressed bytes</span></span><br><span class="line">  <span class="keyword">off_t</span> offset() <span class="keyword">const</span> &#123; <span class="keyword">return</span> ::gzoffset(file_); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// int flush(int f) &#123; return ::gzflush(file_, f); &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> GzipFile <span class="title">openForRead</span><span class="params">(StringArg filename)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GzipFile(::gzopen(filename.c_str(), <span class="string">"rbe"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> GzipFile <span class="title">openForAppend</span><span class="params">(StringArg filename)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GzipFile(::gzopen(filename.c_str(), <span class="string">"abe"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> GzipFile <span class="title">openForWriteExclusive</span><span class="params">(StringArg filename)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GzipFile(::gzopen(filename.c_str(), <span class="string">"wbxe"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> GzipFile <span class="title">openForWriteTruncate</span><span class="params">(StringArg filename)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> GzipFile(::gzopen(filename.c_str(), <span class="string">"wbe"</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">GzipFile</span><span class="params">(gzFile file)</span></span></span><br><span class="line">    : file_(file)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  gzFile file_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/GzipFile.h" target="_blank" rel="noopener">GzipFile</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对 zlib 进行了简单封装，主要欣赏代码风格和规范。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo ProcessInfo</title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-ProcessInfo/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-ProcessInfo/</id>
    <published>2020-10-27T09:08:47.000Z</published>
    <updated>2020-10-27T09:27:39.944Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MUDUO_BASE_PROCESSINFO_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUDUO_BASE_PROCESSINFO_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/StringPiece.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Timestamp.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ProcessInfo</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">pid_t</span> pid();  <span class="comment">// 进程 pid</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">pidString</span><span class="params">()</span></span>; <span class="comment">// pid字符串</span></span><br><span class="line">  <span class="keyword">uid_t</span> uid(); <span class="comment">// userid</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">username</span><span class="params">()</span></span>; <span class="comment">// uid字符串</span></span><br><span class="line">  <span class="keyword">uid_t</span> euid(); <span class="comment">// 有效用户id</span></span><br><span class="line">  <span class="function">Timestamp <span class="title">startTime</span><span class="params">()</span></span>; <span class="comment">// 进程开始时间</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">clockTicksPerSecond</span><span class="params">()</span></span>; <span class="comment">// 时钟频率</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">pageSize</span><span class="params">()</span></span>; <span class="comment">// 内存页大小</span></span><br><span class="line">  <span class="comment">// 是否以调试模式构建</span></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isDebugBuild</span><span class="params">()</span></span>;  <span class="comment">// constexpr</span></span><br><span class="line">  <span class="comment">// 主机名</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">hostname</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="comment">// 进程名</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">procname</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function">StringPiece <span class="title">procname</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; stat)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// read /proc/self/status</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">procStatus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// read /proc/self/stat</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">procStat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// read /proc/self/task/tid/stat</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">threadStat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// readlink /proc/self/exe</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">exePath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">openedFiles</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">maxOpenFiles</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">CpuTime</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">double</span> userSeconds;</span><br><span class="line">    <span class="keyword">double</span> systemSeconds;</span><br><span class="line"></span><br><span class="line">    CpuTime() : userSeconds(<span class="number">0.0</span>), systemSeconds(<span class="number">0.0</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">total</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> userSeconds + systemSeconds; &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function">CpuTime <span class="title">cpuTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">numThreads</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">pid_t</span>&gt; threads();</span><br><span class="line">&#125;  <span class="comment">// namespace ProcessInfo</span></span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license</span></span><br><span class="line"><span class="comment">// that can be found in the License file.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Author: Shuo Chen (chenshuo at chenshuo dot com)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/ProcessInfo.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/CurrentThread.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/FileUtil.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; // snprintf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> detail</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// threadlocal</span></span><br><span class="line">__thread <span class="keyword">int</span> t_numOpenedFiles = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fdDirFilter</span><span class="params">(<span class="keyword">const</span> struct dirent* d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (::<span class="built_in">isdigit</span>(d-&gt;d_name[<span class="number">0</span>]))</span><br><span class="line">  &#123;</span><br><span class="line">    ++t_numOpenedFiles;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__thread <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">pid_t</span>&gt;* t_pids = <span class="literal">NULL</span>;  <span class="comment">// 线程id列表</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">taskDirFilter</span><span class="params">(<span class="keyword">const</span> struct dirent* d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (::<span class="built_in">isdigit</span>(d-&gt;d_name[<span class="number">0</span>]))</span><br><span class="line">  &#123;</span><br><span class="line">    t_pids-&gt;push_back(atoi(d-&gt;d_name));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanDir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *dirpath, <span class="keyword">int</span> (*filter)(<span class="keyword">const</span> struct dirent *))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>** <span class="title">namelist</span> = <span class="title">NULL</span>;</span></span><br><span class="line">  <span class="keyword">int</span> result = ::scandir(dirpath, &amp;namelist, filter, alphasort);   <span class="comment">// alphasort 用来排序</span></span><br><span class="line">  assert(namelist == <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Timestamp g_startTime = Timestamp::now();</span><br><span class="line"><span class="comment">// assume those won't change during the life time of a process.</span></span><br><span class="line"><span class="keyword">int</span> g_clockTicks = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(::sysconf(_SC_CLK_TCK));</span><br><span class="line"><span class="keyword">int</span> g_pageSize = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(::sysconf(_SC_PAGE_SIZE));</span><br><span class="line">&#125;  <span class="comment">// namespace detail</span></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::detail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> ProcessInfo::pid()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ::getpid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::pidString()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line">  <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span> buf, <span class="string">"%d"</span>, pid());</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uid_t</span> ProcessInfo::uid()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ::getuid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::username()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> <span class="title">pwd</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span>* <span class="title">result</span> = <span class="title">NULL</span>;</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">8192</span>];</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span>* name = <span class="string">"unknownuser"</span>;</span><br><span class="line"></span><br><span class="line">  getpwuid_r(uid(), &amp;pwd, buf, <span class="keyword">sizeof</span> buf, &amp;result);  <span class="comment">// 从密码文件中获取记录</span></span><br><span class="line">  <span class="keyword">if</span> (result)</span><br><span class="line">  &#123;</span><br><span class="line">    name = pwd.pw_name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uid_t</span> ProcessInfo::euid()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ::geteuid();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Timestamp ProcessInfo::startTime()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> g_startTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ProcessInfo::clockTicksPerSecond()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> g_clockTicks;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ProcessInfo::pageSize()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> g_pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ProcessInfo::isDebugBuild()</span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NDEBUG</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::hostname()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// HOST_NAME_MAX 64</span></span><br><span class="line">  <span class="comment">// _POSIX_HOST_NAME_MAX 255</span></span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">if</span> (::gethostname(buf, <span class="keyword">sizeof</span> buf) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    buf[<span class="keyword">sizeof</span>(buf)<span class="number">-1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> buf;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"unknownhost"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::procname()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> procname(procStat()).as_string();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringPiece ProcessInfo::procname(<span class="keyword">const</span> <span class="built_in">string</span>&amp; stat)</span><br><span class="line">&#123;</span><br><span class="line">  StringPiece name;</span><br><span class="line">  <span class="keyword">size_t</span> lp = stat.find(<span class="string">'('</span>);</span><br><span class="line">  <span class="keyword">size_t</span> rp = stat.rfind(<span class="string">')'</span>);</span><br><span class="line">  <span class="keyword">if</span> (lp != <span class="built_in">string</span>::npos &amp;&amp; rp != <span class="built_in">string</span>::npos &amp;&amp; lp &lt; rp)</span><br><span class="line">  &#123;</span><br><span class="line">    name.<span class="built_in">set</span>(stat.data()+lp+<span class="number">1</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(rp-lp<span class="number">-1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::procStatus()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">string</span> result;</span><br><span class="line">  FileUtil::readFile(<span class="string">"/proc/self/status"</span>, <span class="number">65536</span>, &amp;result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::procStat()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">string</span> result;</span><br><span class="line">  FileUtil::readFile(<span class="string">"/proc/self/stat"</span>, <span class="number">65536</span>, &amp;result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::threadStat()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line">  <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span> buf, <span class="string">"/proc/self/task/%d/stat"</span>, CurrentThread::tid());</span><br><span class="line">  <span class="built_in">string</span> result;</span><br><span class="line">  FileUtil::readFile(buf, <span class="number">65536</span>, &amp;result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ProcessInfo::exePath()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">string</span> result;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">  <span class="keyword">ssize_t</span> n = ::readlink(<span class="string">"/proc/self/exe"</span>, buf, <span class="keyword">sizeof</span> buf);</span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    result.assign(buf, n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ProcessInfo::openedFiles()</span><br><span class="line">&#123;</span><br><span class="line">  t_numOpenedFiles = <span class="number">0</span>;</span><br><span class="line">  scanDir(<span class="string">"/proc/self/fd"</span>, fdDirFilter);</span><br><span class="line">  <span class="keyword">return</span> t_numOpenedFiles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> struct rlimit &#123;</span></span><br><span class="line"><span class="comment">　　rlim_t rlim_cur;  // 软上限</span></span><br><span class="line"><span class="comment">　　rlim_t rlim_max;  // 硬上限</span></span><br><span class="line"><span class="comment">&#125;;     </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ProcessInfo::maxOpenFiles()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">rl</span>;</span></span><br><span class="line">  <span class="keyword">if</span> (::getrlimit(RLIMIT_NOFILE, &amp;rl))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> openedFiles();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(rl.rlim_cur);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ProcessInfo::CpuTime ProcessInfo::cpuTime()</span><br><span class="line">&#123;</span><br><span class="line">  ProcessInfo::CpuTime t;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">tms</span>;</span></span><br><span class="line">  <span class="keyword">if</span> (::times(&amp;tms) &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> hz = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(clockTicksPerSecond());</span><br><span class="line">    t.userSeconds = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(tms.tms_utime) / hz;</span><br><span class="line">    t.systemSeconds = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(tms.tms_stime) / hz;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ProcessInfo::numThreads()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> status = procStatus();</span><br><span class="line">  <span class="keyword">size_t</span> pos = status.find(<span class="string">"Threads:"</span>);</span><br><span class="line">  <span class="keyword">if</span> (pos != <span class="built_in">string</span>::npos)</span><br><span class="line">  &#123;</span><br><span class="line">    result = ::atoi(status.c_str() + pos + <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">pid_t</span>&gt; ProcessInfo::threads()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">pid_t</span>&gt; result;</span><br><span class="line">  t_pids = &amp;result;</span><br><span class="line">  scanDir(<span class="string">"/proc/self/task"</span>, taskDirFilter);</span><br><span class="line">  t_pids = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="built_in">std</span>::sort(result.begin(), result.end());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/ProcessInfo.h" target="_blank" rel="noopener">ProcessInfo</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo atomic</title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-atomic/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-atomic/</id>
    <published>2020-10-27T09:03:53.000Z</published>
    <updated>2020-10-27T09:07:38.226Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MUDUO_BASE_ATOMIC_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUDUO_BASE_ATOMIC_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/noncopyable.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> detail</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerT</span> :</span> noncopyable</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  AtomicIntegerT()</span><br><span class="line">    : value_(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// uncomment if you need copying and assignment</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// AtomicIntegerT(const AtomicIntegerT&amp; that)</span></span><br><span class="line">  <span class="comment">//   : value_(that.get())</span></span><br><span class="line">  <span class="comment">// &#123;&#125;</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// AtomicIntegerT&amp; operator=(const AtomicIntegerT&amp; that)</span></span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   getAndSet(that.get());</span></span><br><span class="line">  <span class="comment">//   return *this;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// in gcc &gt;= 4.7: __atomic_load_n(&amp;value_, __ATOMIC_SEQ_CST)</span></span><br><span class="line">    <span class="comment">// 实现原子操作</span></span><br><span class="line">    <span class="keyword">return</span> __sync_val_compare_and_swap(&amp;value_, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getAndAdd</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// in gcc &gt;= 4.7: __atomic_fetch_add(&amp;value_, x, __ATOMIC_SEQ_CST)</span></span><br><span class="line">    <span class="keyword">return</span> __sync_fetch_and_add(&amp;value_, x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">addAndGet</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getAndAdd(x) + x;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">incrementAndGet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAndGet(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">decrementAndGet</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addAndGet(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    getAndAdd(x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    incrementAndGet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    decrementAndGet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getAndSet</span><span class="params">(T newValue)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="comment">// in gcc &gt;= 4.7: __atomic_exchange_n(&amp;value_, newValue, __ATOMIC_SEQ_CST)</span></span><br><span class="line">    <span class="comment">// 实现原子操作</span></span><br><span class="line">    <span class="keyword">return</span> __sync_lock_test_and_set(&amp;value_, newValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> T value_;  <span class="comment">// 直接在内存占用进行存取</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;  <span class="comment">// namespace detail</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> detail::AtomicIntegerT&lt;<span class="keyword">int32_t</span>&gt; AtomicInt32;</span><br><span class="line"><span class="keyword">typedef</span> detail::AtomicIntegerT&lt;<span class="keyword">int64_t</span>&gt; AtomicInt64;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MUDUO_BASE_ATOMIC_H</span></span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/Atomic.h" target="_blank" rel="noopener">Atomic</a></li><li><a href="https://www.cnblogs.com/woodineast/p/13545740.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/woodineast/p/13545740.html" target="_blank" rel="noopener">muduo源码解析2-AtomicIntegerT类</a></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ 多线程 muduo" scheme="http://ywqzzy.github.io/tags/c-%E5%A4%9A%E7%BA%BF%E7%A8%8B-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo date</title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-date/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-date/</id>
    <published>2020-10-27T08:54:44.000Z</published>
    <updated>2020-10-27T09:02:21.551Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MUDUO_BASE_DATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUDUO_BASE_DATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/copyable.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Types.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Date in Gregorian calendar.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// This class is immutable.</span></span><br><span class="line"><span class="comment">/// It's recommended to pass it by value, since it's passed in register on x64.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Date</span> :</span> <span class="keyword">public</span> muduo::copyable</span><br><span class="line">          <span class="comment">// public boost::less_than_comparable&lt;Date&gt;,</span></span><br><span class="line">          <span class="comment">// public boost::equality_comparable&lt;Date&gt;</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">YearMonthDay</span></span></span><br><span class="line"><span class="class">  &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year; <span class="comment">// [1900..2500]</span></span><br><span class="line">    <span class="keyword">int</span> month;  <span class="comment">// [1..12]</span></span><br><span class="line">    <span class="keyword">int</span> day;  <span class="comment">// [1..31]</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kDaysPerWeek = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kJulianDayOf1970_01_01;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Constucts an invalid Date.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  Date()</span><br><span class="line">    : julianDayNumber_(<span class="number">0</span>)</span><br><span class="line">  &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Constucts a yyyy-mm-dd Date.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// 1 &lt;= month &lt;= 12</span></span><br><span class="line">  Date(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day);</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Constucts a Date from Julian Day Number.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> julianDayNum)</span></span></span><br><span class="line">    : julianDayNumber_(julianDayNum)</span><br><span class="line">  &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Constucts a Date from struct tm</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Date</span><span class="params">(<span class="keyword">const</span> struct tm&amp;)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// default copy/assignment/dtor are Okay</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Date&amp; that)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::swap(julianDayNumber_, that.julianDayNumber_);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> julianDayNumber_ &gt; <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Converts to yyyy-mm-dd format.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">toIsoString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">struct YearMonthDay <span class="title">yearMonthDay</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">year</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> yearMonthDay().year;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">month</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> yearMonthDay().month;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">day</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> yearMonthDay().day;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// [0, 1, ..., 6] =&gt; [Sunday, Monday, ..., Saturday ]</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">weekDay</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (julianDayNumber_+<span class="number">1</span>) % kDaysPerWeek;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">julianDayNumber</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> julianDayNumber_; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> julianDayNumber_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Date x, Date y)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> x.julianDayNumber() &lt; y.julianDayNumber();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(Date x, Date y)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> x.julianDayNumber() == y.julianDayNumber();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MUDUO_BASE_DATE_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> detail</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> require_32_bit_integer_at_least[<span class="keyword">sizeof</span>(<span class="keyword">int</span>) &gt;= <span class="keyword">sizeof</span>(<span class="keyword">int32_t</span>) ? <span class="number">1</span> : <span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// algorithm and explanation see:</span></span><br><span class="line"><span class="comment">// http://www.faqs.org/faqs/calendars/faq/part2/</span></span><br><span class="line"><span class="comment">// http://blog.csdn.net/Solstice</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getJulianDayNumber</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  (<span class="keyword">void</span>) require_32_bit_integer_at_least; <span class="comment">// no warning please</span></span><br><span class="line">  <span class="keyword">int</span> a = (<span class="number">14</span> - month) / <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">int</span> y = year + <span class="number">4800</span> - a;</span><br><span class="line">  <span class="keyword">int</span> m = month + <span class="number">12</span> * a - <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> day + (<span class="number">153</span>*m + <span class="number">2</span>) / <span class="number">5</span> + y*<span class="number">365</span> + y/<span class="number">4</span> - y/<span class="number">100</span> + y/<span class="number">400</span> - <span class="number">32045</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span>:</span>:<span class="function">YearMonthDay <span class="title">getYearMonthDay</span><span class="params">(<span class="keyword">int</span> julianDayNumber)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a = julianDayNumber + <span class="number">32044</span>;</span><br><span class="line">  <span class="keyword">int</span> b = (<span class="number">4</span> * a + <span class="number">3</span>) / <span class="number">146097</span>;</span><br><span class="line">  <span class="keyword">int</span> c = a - ((b * <span class="number">146097</span>) / <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">int</span> d = (<span class="number">4</span> * c + <span class="number">3</span>) / <span class="number">1461</span>;</span><br><span class="line">  <span class="keyword">int</span> e = c - ((<span class="number">1461</span> * d) / <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">int</span> m = (<span class="number">5</span> * e + <span class="number">2</span>) / <span class="number">153</span>;</span><br><span class="line">  Date::YearMonthDay ymd;</span><br><span class="line">  ymd.day = e - ((<span class="number">153</span> * m + <span class="number">2</span>) / <span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">  ymd.month = m + <span class="number">3</span> - <span class="number">12</span> * (m / <span class="number">10</span>);</span><br><span class="line">  ymd.year = b * <span class="number">100</span> + d - <span class="number">4800</span> + (m / <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">return</span> ymd;</span><br><span class="line">&#125;</span><br><span class="line">&#125;  <span class="comment">// namespace detail</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Date::kJulianDayOf1970_01_01 = detail::getJulianDayNumber(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> muduo::detail;</span><br><span class="line"></span><br><span class="line">Date::Date(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span><br><span class="line">  : julianDayNumber_(getJulianDayNumber(y, m, d))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Date::Date(<span class="keyword">const</span> struct tm&amp; t)</span><br><span class="line">  : julianDayNumber_(getJulianDayNumber(</span><br><span class="line">        t.tm_year+<span class="number">1900</span>,</span><br><span class="line">        t.tm_mon+<span class="number">1</span>,</span><br><span class="line">        t.tm_mday))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Date::toIsoString() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line">  <span class="function">YearMonthDay <span class="title">ymd</span><span class="params">(yearMonthDay())</span></span>;</span><br><span class="line">  <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span> buf, <span class="string">"%4d-%02d-%02d"</span>, ymd.year, ymd.month, ymd.day);</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Date::YearMonthDay Date::yearMonthDay() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> getYearMonthDay(julianDayNumber_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/Date.h" target="_blank" rel="noopener">date</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo FileUtil</title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-FileUtil/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-FileUtil/</id>
    <published>2020-10-27T08:29:03.000Z</published>
    <updated>2020-10-27T08:51:32.557Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MUDUO_BASE_FILEUTIL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUDUO_BASE_FILEUTIL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/noncopyable.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/StringPiece.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;  // for off_t</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> FileUtil</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read small file &lt; 64KB</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReadSmallFile</span> :</span> noncopyable</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ReadSmallFile(StringArg filename);</span><br><span class="line">  ~ReadSmallFile();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// return errno</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> String&gt;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">readToString</span><span class="params">(<span class="keyword">int</span> maxSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                   String* content,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">int64_t</span>* fileSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">int64_t</span>* modifyTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">int64_t</span>* createTime)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Read at maxium kBufferSize into buf_</span></span><br><span class="line">  <span class="comment">// return errno</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">readToBuffer</span><span class="params">(<span class="keyword">int</span>* size)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">buffer</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> buf_; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kBufferSize = <span class="number">64</span>*<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int</span> fd_;</span><br><span class="line">  <span class="keyword">int</span> err_;</span><br><span class="line">  <span class="keyword">char</span> buf_[kBufferSize];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// read the file content, returns errno if error happens.</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> String&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readFile</span><span class="params">(StringArg filename,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">int</span> maxSize,</span></span></span><br><span class="line"><span class="function"><span class="params">             String* content,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">int64_t</span>* fileSize = <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">int64_t</span>* modifyTime = <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             <span class="keyword">int64_t</span>* createTime = <span class="literal">NULL</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">ReadSmallFile <span class="title">file</span><span class="params">(filename)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> file.readToString(maxSize, content, fileSize, modifyTime, createTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// not thread safe</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppendFile</span> :</span> noncopyable</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">AppendFile</span><span class="params">(StringArg filename)</span></span>;</span><br><span class="line"></span><br><span class="line">  ~AppendFile();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* logline, <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">off_t</span> writtenBytes() <span class="keyword">const</span> &#123; <span class="keyword">return</span> writtenBytes_; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> write(<span class="keyword">const</span> <span class="keyword">char</span>* logline, <span class="keyword">size_t</span> len);</span><br><span class="line"></span><br><span class="line">  FILE* fp_;</span><br><span class="line">  <span class="keyword">char</span> buffer_[<span class="number">64</span>*<span class="number">1024</span>];</span><br><span class="line">  <span class="keyword">off_t</span> writtenBytes_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace FileUtil</span></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MUDUO_BASE_FILEUTIL_H</span></span></span><br></pre></td></tr></table></figure><h2 id="AppendFile"><a href="#AppendFile" class="headerlink" title="AppendFile"></a>AppendFile</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">FileUtil::AppendFile::AppendFile(StringArg filename)</span><br><span class="line">  : fp_(::fopen(filename.c_str(), <span class="string">"ae"</span>)),  <span class="comment">// 'e' for O_CLOEXEC  'a' 表示追加</span></span><br><span class="line">    writtenBytes_(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  assert(fp_);</span><br><span class="line">  ::setbuffer(fp_, buffer_, <span class="keyword">sizeof</span> buffer_);</span><br><span class="line">  <span class="comment">// posix_fadvise POSIX_FADV_DONTNEED ?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileUtil::AppendFile::~AppendFile()</span><br><span class="line">&#123;</span><br><span class="line">  ::fclose(fp_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> FileUtil::AppendFile::append(<span class="keyword">const</span> <span class="keyword">char</span>* logline, <span class="keyword">const</span> <span class="keyword">size_t</span> len)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 写入文件</span></span><br><span class="line">  <span class="keyword">size_t</span> n = write(logline, len);</span><br><span class="line">  <span class="keyword">size_t</span> remain = len - n;</span><br><span class="line">  <span class="keyword">while</span> (remain &gt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> x = write(logline + n, remain);</span><br><span class="line">    <span class="comment">// 写入失败</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> err = ferror(fp_);</span><br><span class="line">      <span class="keyword">if</span> (err)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"AppendFile::append() failed %s\n"</span>, strerror_tl(err));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 继续写入</span></span><br><span class="line">    n += x;</span><br><span class="line">    remain = len - n; <span class="comment">// remain -= x</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新已经写入的总字节数 </span></span><br><span class="line">  writtenBytes_ += len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新文件流</span></span><br><span class="line"><span class="keyword">void</span> FileUtil::AppendFile::flush()</span><br><span class="line">&#123;</span><br><span class="line">  ::fflush(fp_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> FileUtil::AppendFile::write(<span class="keyword">const</span> <span class="keyword">char</span>* logline, <span class="keyword">size_t</span> len)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// #undef fwrite_unlocked</span></span><br><span class="line">  <span class="comment">// 写文件的不加锁版本，线程不安全</span></span><br><span class="line">  <span class="keyword">return</span> ::fwrite_unlocked(logline, <span class="number">1</span>, len, fp_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReadSmallFile"><a href="#ReadSmallFile" class="headerlink" title="ReadSmallFile"></a>ReadSmallFile</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">FileUtil::ReadSmallFile::ReadSmallFile(StringArg filename)</span><br><span class="line">  : fd_(::open(filename.c_str(), O_RDONLY | O_CLOEXEC)),  <span class="comment">// 只读 打开文件并记录文件描述符</span></span><br><span class="line">    err_(<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 清空缓冲区</span></span><br><span class="line">  buf_[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line">  <span class="keyword">if</span> (fd_ &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    err_ = errno;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FileUtil::ReadSmallFile::~ReadSmallFile()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (fd_ &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ::close(fd_); <span class="comment">// <span class="doctag">FIXME:</span> check EINTR</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return errno</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> String&gt;</span><br><span class="line"><span class="keyword">int</span> FileUtil::ReadSmallFile::readToString(<span class="keyword">int</span> maxSize,</span><br><span class="line">                                          String* content,</span><br><span class="line">                                          <span class="keyword">int64_t</span>* fileSize,</span><br><span class="line">                                          <span class="keyword">int64_t</span>* modifyTime,</span><br><span class="line">                                          <span class="keyword">int64_t</span>* createTime)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 判断是否占 8 位  </span></span><br><span class="line">  <span class="keyword">static_assert</span>(<span class="keyword">sizeof</span>(<span class="keyword">off_t</span>) == <span class="number">8</span>, <span class="string">"_FILE_OFFSET_BITS = 64"</span>);</span><br><span class="line">  assert(content != <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">int</span> err = err_;</span><br><span class="line">  <span class="keyword">if</span> (fd_ &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    content-&gt;clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fileSize)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 获取文件信息</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">statbuf</span>;</span></span><br><span class="line">      <span class="keyword">if</span> (::fstat(fd_, &amp;statbuf) == <span class="number">0</span>)</span><br><span class="line">      &#123; <span class="comment">// 是否是常规文件</span></span><br><span class="line">        <span class="keyword">if</span> (S_ISREG(statbuf.st_mode))</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 获得文件大小</span></span><br><span class="line">          *fileSize = statbuf.st_size;</span><br><span class="line">          <span class="comment">// 申请空间</span></span><br><span class="line">          content-&gt;reserve(<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="built_in">std</span>::min(implicit_cast&lt;<span class="keyword">int64_t</span>&gt;(maxSize), *fileSize)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (S_ISDIR(statbuf.st_mode))  <span class="comment">// 是目录</span></span><br><span class="line">        &#123;</span><br><span class="line">          err = EISDIR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (modifyTime) <span class="comment">// 更新时间</span></span><br><span class="line">        &#123;</span><br><span class="line">          *modifyTime = statbuf.st_mtime;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (createTime) <span class="comment">// 创建时间</span></span><br><span class="line">        &#123;</span><br><span class="line">          *createTime = statbuf.st_ctime;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        err = errno;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (content-&gt;size() &lt; implicit_cast&lt;<span class="keyword">size_t</span>&gt;(maxSize))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//   要读的字节数</span></span><br><span class="line">      <span class="keyword">size_t</span> toRead = <span class="built_in">std</span>::min(implicit_cast&lt;<span class="keyword">size_t</span>&gt;(maxSize) - content-&gt;size(), <span class="keyword">sizeof</span>(buf_));</span><br><span class="line">      <span class="keyword">ssize_t</span> n = ::read(fd_, buf_, toRead);</span><br><span class="line">      <span class="keyword">if</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        content-&gt;append(buf_, n);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">          err = errno;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件内容读入缓冲区, 将文件大小赋值给 size</span></span><br><span class="line"><span class="keyword">int</span> FileUtil::ReadSmallFile::readToBuffer(<span class="keyword">int</span>* size)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> err = err_;</span><br><span class="line">  <span class="keyword">if</span> (fd_ &gt;= <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//pread()  reads  up to count bytes from file descriptor fd at offset offset (from the start of the</span></span><br><span class="line">    <span class="comment">//file) into the buffer starting at buf.  The file offset is not changed.</span></span><br><span class="line">    <span class="keyword">ssize_t</span> n = ::pread(fd_, buf_, <span class="keyword">sizeof</span>(buf_)<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (size)</span><br><span class="line">      &#123;</span><br><span class="line">        *size = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(n);</span><br><span class="line">      &#125;</span><br><span class="line">      buf_[n] = <span class="string">'\0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      err = errno;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">int</span> FileUtil::readFile(StringArg filename,</span><br><span class="line">                                <span class="keyword">int</span> maxSize,</span><br><span class="line">                                <span class="built_in">string</span>* content,</span><br><span class="line">                                <span class="keyword">int64_t</span>*, <span class="keyword">int64_t</span>*, <span class="keyword">int64_t</span>*);</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">int</span> FileUtil::ReadSmallFile::readToString(</span><br><span class="line">    <span class="keyword">int</span> maxSize,</span><br><span class="line">    <span class="built_in">string</span>* content,</span><br><span class="line">    <span class="keyword">int64_t</span>*, <span class="keyword">int64_t</span>*, <span class="keyword">int64_t</span>*);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/FileUtil.h" target="_blank" rel="noopener">FileUtil</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo CurrentThread</title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-CurrentThread/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-CurrentThread/</id>
    <published>2020-10-27T08:23:48.000Z</published>
    <updated>2020-10-27T08:28:09.279Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MUDUO_BASE_CURRENTTHREAD_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUDUO_BASE_CURRENTTHREAD_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Types.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> CurrentThread</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// internal</span></span><br><span class="line">  <span class="comment">// 使用 __thread 修饰变量 使得每一个线程都有一份独立实体，各个线程的值互不干扰</span></span><br><span class="line">  <span class="keyword">extern</span> __thread <span class="keyword">int</span> t_cachedTid;  <span class="comment">// 当前线程id</span></span><br><span class="line">  <span class="keyword">extern</span> __thread <span class="keyword">char</span> t_tidString[<span class="number">32</span>]; <span class="comment">// 当前线程id</span></span><br><span class="line">  <span class="keyword">extern</span> __thread <span class="keyword">int</span> t_tidStringLength; <span class="comment">// char 的大小</span></span><br><span class="line">  <span class="keyword">extern</span> __thread <span class="keyword">const</span> <span class="keyword">char</span>* t_threadName; <span class="comment">// 线程名字</span></span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">cacheTid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">tid</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__builtin_expect(t_cachedTid == <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      cacheTid();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t_cachedTid;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">tidString</span><span class="params">()</span> <span class="comment">// for logging</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t_tidString;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">tidStringLength</span><span class="params">()</span> <span class="comment">// for logging</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t_tidStringLength;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t_threadName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">isMainThread</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleepUsec</span><span class="params">(<span class="keyword">int64_t</span> usec)</span></span>;  <span class="comment">// for testing</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">stackTrace</span><span class="params">(<span class="keyword">bool</span> demangle)</span></span>;</span><br><span class="line">&#125;  <span class="comment">// namespace CurrentThread</span></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MUDUO_BASE_CURRENTTHREAD_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> CurrentThread</span><br><span class="line">&#123;</span><br><span class="line">__thread <span class="keyword">int</span> t_cachedTid = <span class="number">0</span>;</span><br><span class="line">__thread <span class="keyword">char</span> t_tidString[<span class="number">32</span>];</span><br><span class="line">__thread <span class="keyword">int</span> t_tidStringLength = <span class="number">6</span>;</span><br><span class="line">__thread <span class="keyword">const</span> <span class="keyword">char</span>* t_threadName = <span class="string">"unknown"</span>;</span><br><span class="line"><span class="keyword">static_assert</span>(<span class="built_in">std</span>::is_same&lt;<span class="keyword">int</span>, <span class="keyword">pid_t</span>&gt;::value, <span class="string">"pid_t should be int"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">stackTrace</span><span class="params">(<span class="keyword">bool</span> demangle)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> <span class="built_in">stack</span>;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">int</span> max_frames = <span class="number">200</span>;</span><br><span class="line">  <span class="keyword">void</span>* frame[max_frames];</span><br><span class="line">  <span class="keyword">int</span> nptrs = ::backtrace(frame, max_frames);</span><br><span class="line">  <span class="keyword">char</span>** strings = ::backtrace_symbols(frame, nptrs);</span><br><span class="line">  <span class="keyword">if</span> (strings)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> len = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">char</span>* demangled = demangle ? <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(::<span class="built_in">malloc</span>(len)) : <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nptrs; ++i)  <span class="comment">// skipping the 0-th, which is this function</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (demangle)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// https://panthema.net/2008/0901-stacktrace-demangled/</span></span><br><span class="line">        <span class="comment">// bin/exception_test(_ZN3Bar4testEv+0x79) [0x401909]</span></span><br><span class="line">        <span class="keyword">char</span>* left_par = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">char</span>* plus = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span>* p = strings[i]; *p; ++p)</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (*p == <span class="string">'('</span>)</span><br><span class="line">            left_par = p;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (*p == <span class="string">'+'</span>)</span><br><span class="line">            plus = p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left_par &amp;&amp; plus)</span><br><span class="line">        &#123;</span><br><span class="line">          *plus = <span class="string">'\0'</span>;</span><br><span class="line">          <span class="keyword">int</span> status = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">char</span>* ret = abi::__cxa_demangle(left_par+<span class="number">1</span>, demangled, &amp;len, &amp;status);</span><br><span class="line">          *plus = <span class="string">'+'</span>;</span><br><span class="line">          <span class="keyword">if</span> (status == <span class="number">0</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            demangled = ret;  <span class="comment">// ret could be realloc()</span></span><br><span class="line">            <span class="built_in">stack</span>.append(strings[i], left_par+<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">stack</span>.append(demangled);</span><br><span class="line">            <span class="built_in">stack</span>.append(plus);</span><br><span class="line">            <span class="built_in">stack</span>.push_back(<span class="string">'\n'</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Fallback to mangled names</span></span><br><span class="line">      <span class="built_in">stack</span>.append(strings[i]);</span><br><span class="line">      <span class="built_in">stack</span>.push_back(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(demangled);</span><br><span class="line">    <span class="built_in">free</span>(strings);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">stack</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace CurrentThread</span></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/CurrentThread.h" target="_blank" rel="noopener">currentThread</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo exception</title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-exception/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-exception/</id>
    <published>2020-10-27T08:19:21.000Z</published>
    <updated>2020-10-27T08:22:02.765Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MUDUO_BASE_EXCEPTION_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUDUO_BASE_EXCEPTION_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Types.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Exception</span> :</span> <span class="keyword">public</span> <span class="built_in">std</span>::exception</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Exception(<span class="built_in">string</span> what);</span><br><span class="line">  ~Exception() <span class="keyword">noexcept</span> override = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// default copy-ctor and operator= are okay.</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">what</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> override</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message_.c_str();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">stackTrace</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack_.c_str();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="built_in">string</span> message_;</span><br><span class="line">  <span class="built_in">string</span> stack_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MUDUO_BASE_EXCEPTION_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Exception.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/CurrentThread.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Exception::Exception(<span class="built_in">string</span> msg)</span><br><span class="line">  : message_(<span class="built_in">std</span>::move(msg)),</span><br><span class="line">    stack_(CurrentThread::stackTrace(<span class="comment">/*demangle=*/</span><span class="literal">false</span>))</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/Exception.h" target="_blank" rel="noopener">exception</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo Timestamp </title>
    <link href="http://ywqzzy.github.io/2020/10/27/muduo-Timestamp/"/>
    <id>http://ywqzzy.github.io/2020/10/27/muduo-Timestamp/</id>
    <published>2020-10-27T07:15:12.000Z</published>
    <updated>2020-10-27T07:20:12.885Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timestamp</span> :</span> <span class="keyword">public</span> muduo::copyable,</span><br><span class="line">                  <span class="keyword">public</span> boost::equality_comparable&lt;Timestamp&gt;,</span><br><span class="line">                  <span class="keyword">public</span> boost::less_than_comparable&lt;Timestamp&gt;</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Constucts an invalid Timestamp.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  Timestamp()</span><br><span class="line">    : microSecondsSinceEpoch_(<span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Constucts a Timestamp at specific time</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// @param microSecondsSinceEpoch</span></span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Timestamp</span><span class="params">(<span class="keyword">int64_t</span> microSecondsSinceEpochArg)</span></span></span><br><span class="line">    : microSecondsSinceEpoch_(microSecondsSinceEpochArg)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(Timestamp&amp; that)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::swap(microSecondsSinceEpoch_, that.microSecondsSinceEpoch_);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// default copy/assignment/dtor are Okay</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">toString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  <span class="function"><span class="built_in">string</span> <span class="title">toFormattedString</span><span class="params">(<span class="keyword">bool</span> showMicroseconds = <span class="literal">true</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">valid</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> microSecondsSinceEpoch_ &gt; <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for internal usage.</span></span><br><span class="line">  <span class="keyword">int64_t</span> microSecondsSinceEpoch() <span class="keyword">const</span> &#123; <span class="keyword">return</span> microSecondsSinceEpoch_; &#125;</span><br><span class="line">  <span class="keyword">time_t</span> secondsSinceEpoch() <span class="keyword">const</span></span><br><span class="line">  &#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">time_t</span>&gt;(microSecondsSinceEpoch_ / kMicroSecondsPerSecond); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// Get time of now.</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> Timestamp <span class="title">now</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Timestamp <span class="title">invalid</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Timestamp();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> Timestamp <span class="title">fromUnixTime</span><span class="params">(<span class="keyword">time_t</span> t)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fromUnixTime(t, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> Timestamp <span class="title">fromUnixTime</span><span class="params">(<span class="keyword">time_t</span> t, <span class="keyword">int</span> microseconds)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Timestamp(<span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(t) * kMicroSecondsPerSecond + microseconds);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kMicroSecondsPerSecond = <span class="number">1000</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">int64_t</span> microSecondsSinceEpoch_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Timestamp lhs, Timestamp rhs)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> lhs.microSecondsSinceEpoch() &lt; rhs.microSecondsSinceEpoch();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(Timestamp lhs, Timestamp rhs)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> lhs.microSecondsSinceEpoch() == rhs.microSecondsSinceEpoch();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Gets time difference of two timestamps, result in seconds.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// @param high, low</span></span><br><span class="line"><span class="comment">/// @return (high-low) in seconds</span></span><br><span class="line"><span class="comment">/// @c double has 52-bit precision, enough for one-microsecond</span></span><br><span class="line"><span class="comment">/// resolution for next 100 years.</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">timeDifference</span><span class="params">(Timestamp high, Timestamp low)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int64_t</span> diff = high.microSecondsSinceEpoch() - low.microSecondsSinceEpoch();</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(diff) / Timestamp::kMicroSecondsPerSecond;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Add @c seconds to given timestamp.</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// @return timestamp+seconds as Timestamp</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Timestamp <span class="title">addTime</span><span class="params">(Timestamp timestamp, <span class="keyword">double</span> seconds)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int64_t</span> delta = <span class="keyword">static_cast</span>&lt;<span class="keyword">int64_t</span>&gt;(seconds * Timestamp::kMicroSecondsPerSecond);</span><br><span class="line">  <span class="keyword">return</span> Timestamp(timestamp.microSecondsSinceEpoch() + delta);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> Timestamp::toString() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int64_t</span> seconds = microSecondsSinceEpoch_ / kMicroSecondsPerSecond;</span><br><span class="line">  <span class="keyword">int64_t</span> microseconds = microSecondsSinceEpoch_ % kMicroSecondsPerSecond;</span><br><span class="line">  <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"%"</span> PRId64 <span class="string">".%06"</span> PRId64 <span class="string">""</span>, seconds, microseconds);</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Timestamp::toFormattedString(<span class="keyword">bool</span> showMicroseconds) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">time_t</span> seconds = <span class="keyword">static_cast</span>&lt;<span class="keyword">time_t</span>&gt;(microSecondsSinceEpoch_ / kMicroSecondsPerSecond);</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">tm_time</span>;</span></span><br><span class="line">  gmtime_r(&amp;seconds, &amp;tm_time);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (showMicroseconds)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> microseconds = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(microSecondsSinceEpoch_ % kMicroSecondsPerSecond);</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"%4d%02d%02d %02d:%02d:%02d.%06d"</span>,</span><br><span class="line">             tm_time.tm_year + <span class="number">1900</span>, tm_time.tm_mon + <span class="number">1</span>, tm_time.tm_mday,</span><br><span class="line">             tm_time.tm_hour, tm_time.tm_min, tm_time.tm_sec,</span><br><span class="line">             microseconds);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"%4d%02d%02d %02d:%02d:%02d"</span>,</span><br><span class="line">             tm_time.tm_year + <span class="number">1900</span>, tm_time.tm_mon + <span class="number">1</span>, tm_time.tm_mday,</span><br><span class="line">             tm_time.tm_hour, tm_time.tm_min, tm_time.tm_sec);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Timestamp Timestamp::now()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">  gettimeofday(&amp;tv, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="keyword">int64_t</span> seconds = tv.tv_sec;</span><br><span class="line">  <span class="keyword">return</span> Timestamp(seconds * kMicroSecondsPerSecond + tv.tv_usec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/Timestamp.h" target="_blank" rel="noopener">timestamp</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>leetcode148排序链表</title>
    <link href="http://ywqzzy.github.io/2020/10/23/leetcode148%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>http://ywqzzy.github.io/2020/10/23/leetcode148排序链表/</id>
    <published>2020-10-23T13:22:26.000Z</published>
    <updated>2020-10-23T13:26:27.942Z</updated>
    
    <content type="html"><![CDATA[<p>在 <em>O</em>(<em>n</em> log <em>n</em>) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p><p>不能用递归法来解，所以按照链表长度从 1 到 len，倍增进行合并。需要依次合并长度为 1，2，4…..len的链表。</p><p>主要需要将链表分割成一个个长度为 size 的小段，并且将长度为 size 的小段进行合并。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// cut n个节点，然后返回剩下的链表的头节点</span></span><br><span class="line">    <span class="function">ListNode* <span class="title">cut</span><span class="params">(ListNode* head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        ListNode* node = head;</span><br><span class="line">        <span class="keyword">while</span>(--n &amp;&amp; node) node = node-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* next = node-&gt;next;</span><br><span class="line">        node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ListNode* <span class="title">merge</span><span class="params">(ListNode* l1, ListNode* l2)</span> </span>&#123;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode* node = dummy;</span><br><span class="line">        <span class="keyword">while</span>(l1 &amp;&amp; l2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1-&gt;val &lt; l2-&gt; val) &#123;</span><br><span class="line">                node-&gt;next = l1;</span><br><span class="line">                l1 = l1-&gt;next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node-&gt;next = l2;</span><br><span class="line">                l2 = l2-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l1) node-&gt;next = l1;</span><br><span class="line">        <span class="keyword">else</span> node-&gt;next = l2;</span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">sortList</span><span class="params">(ListNode* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode* node = head;</span><br><span class="line">        <span class="keyword">while</span>(node) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            node = node-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode* dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy-&gt;next = head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; len; sz*=<span class="number">2</span>) &#123;</span><br><span class="line">            ListNode* cur = dummy-&gt;next;  <span class="comment">// 待分割链表的第一个节点  tail为已经合并好的链表的最后一个节点</span></span><br><span class="line">            ListNode* tail = dummy;</span><br><span class="line">            <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">                ListNode* left = cur;</span><br><span class="line">                ListNode* right = cut(left, sz);</span><br><span class="line">                cur = cut(right, sz);</span><br><span class="line">                tail-&gt;next = merge(left, right);</span><br><span class="line">                <span class="keyword">while</span>(tail-&gt;next) tail = tail-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 &lt;em&gt;O&lt;/em&gt;(&lt;em&gt;n&lt;/em&gt; log &lt;em&gt;n&lt;/em&gt;) 时间复杂度和常数级空间复杂度下，对链表进行排序。&lt;/p&gt;
&lt;p&gt;不能用递归法来解，所以按照链表长度从 1 到 len，倍增进行合并。需要依次合并长度为 1，2，4…..len的链表。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="leetcode" scheme="http://ywqzzy.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode 链表 排序" scheme="http://ywqzzy.github.io/tags/leetcode-%E9%93%BE%E8%A1%A8-%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>muduo Thread</title>
    <link href="http://ywqzzy.github.io/2020/10/23/muduo-Thread/"/>
    <id>http://ywqzzy.github.io/2020/10/23/muduo-Thread/</id>
    <published>2020-10-23T02:30:20.000Z</published>
    <updated>2020-10-27T09:34:50.605Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo" scheme="http://ywqzzy.github.io/tags/c-muduo/"/>
    
  </entry>
  
  <entry>
    <title>muduo BoundedBlockingQueue</title>
    <link href="http://ywqzzy.github.io/2020/10/22/muduo-BoundedBlockingQueue/"/>
    <id>http://ywqzzy.github.io/2020/10/22/muduo-BoundedBlockingQueue/</id>
    <published>2020-10-22T01:55:10.000Z</published>
    <updated>2020-10-23T03:21:52.502Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style license</span></span><br><span class="line"><span class="comment">// that can be found in the License file.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Author: Shuo Chen (chenshuo at chenshuo dot com)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MUDUO_BASE_BOUNDEDBLOCKINGQUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUDUO_BASE_BOUNDEDBLOCKINGQUEUE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Condition.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"muduo/base/Mutex.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/circular_buffer.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> muduo</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedBlockingQueue</span> :</span> noncopyable</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">BoundedBlockingQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span></span><br><span class="line">    : mutex_(),</span><br><span class="line">      notEmpty_(mutex_),</span><br><span class="line">      notFull_(mutex_),</span><br><span class="line">      queue_(maxSize)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (queue_.full())</span><br><span class="line">    &#123;</span><br><span class="line">      notFull_.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    assert(!queue_.full());</span><br><span class="line">    queue_.push_back(x);</span><br><span class="line">    notEmpty_.notify();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(T&amp;&amp; x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (queue_.full())</span><br><span class="line">    &#123;</span><br><span class="line">      notFull_.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    assert(!queue_.full());</span><br><span class="line">    queue_.push_back(<span class="built_in">std</span>::move(x));</span><br><span class="line">    notEmpty_.notify();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">take</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (queue_.empty())</span><br><span class="line">    &#123;</span><br><span class="line">      notEmpty_.wait();</span><br><span class="line">    &#125;</span><br><span class="line">    assert(!queue_.empty());</span><br><span class="line">    <span class="function">T <span class="title">front</span><span class="params">(<span class="built_in">std</span>::move(queue_.front()))</span></span>;</span><br><span class="line">    queue_.pop_front();</span><br><span class="line">    notFull_.notify();</span><br><span class="line">    <span class="keyword">return</span> front;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> queue_.empty();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">bool</span> <span class="title">full</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> queue_.full();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> size() <span class="keyword">const</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> queue_.size();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">size_t</span> capacity() <span class="keyword">const</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="function">MutexLockGuard <span class="title">lock</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> queue_.capacity();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">mutable</span> MutexLock          mutex_;</span><br><span class="line">  <span class="function">Condition                  notEmpty_ <span class="title">GUARDED_BY</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">  <span class="function">Condition                  notFull_ <span class="title">GUARDED_BY</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">  boost::circular_buffer&lt;T&gt;  <span class="function">queue_ <span class="title">GUARDED_BY</span><span class="params">(mutex_)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace muduo</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  <span class="comment">// MUDUO_BASE_BOUNDEDBLOCKINGQUEUE_H</span></span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://github.com/chenshuo/muduo/blob/master/muduo/base/BoundedBlockingQueue.h" target="_blank" rel="noopener">BoundedBlockingQueue</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="muduo" scheme="http://ywqzzy.github.io/categories/muduo/"/>
    
    
      <category term="c++ muduo 多线程" scheme="http://ywqzzy.github.io/tags/c-muduo-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
